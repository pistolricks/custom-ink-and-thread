import { SyncStorage, AsyncStorage, AsyncStorageWithOptions, SyncStorageWithOptions } from "./index.js";
/**
 * adds a `.clear` method to a Storage without one only using `.key`/`.removeItem`
 */
export declare const addClearMethod: <S extends SyncStorage | SyncStorageWithOptions<any>, R extends S & {
    clear: () => void;
}>(storage: Omit<S, "clear"> & {
    clear?: () => void;
}) => R;
/**
 * adds a `.withOptions` method that wraps the storage to apply options
 */
export declare const addWithOptionsMethod: <O, S extends SyncStorageWithOptions<O> | AsyncStorageWithOptions<O>, W extends AsyncStorage | SyncStorage = S extends AsyncStorageWithOptions<O> ? AsyncStorage : SyncStorage>(storage: S) => S & {
    withOptions: (options: O) => W;
};
export type StorageMultiplexer = <S extends any[]>(...storages: S) => AsyncStorage extends S[number] ? AsyncStorage : SyncStorage;
/**
 * combines multiple storages to a single storage
 */
export declare const multiplexStorage: StorageMultiplexer;
/**
 * Provides a minimal Storage API wrapper for an object
 */
export declare const makeObjectStorage: (object: {
    [key: string]: string;
}) => {
    getItem: (key: string) => string | null;
    setItem: (key: string, value: string) => void;
    removeItem: (key: string) => void;
    key: (index: number) => string | undefined;
    readonly length: number;
    clear: () => void;
};
