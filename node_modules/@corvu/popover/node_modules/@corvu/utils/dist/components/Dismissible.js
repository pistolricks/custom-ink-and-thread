import { isFunction } from '../chunk/VPNLJWYW.js';
import { dismissible_default } from '../chunk/4XMQWCCT.js';
import { access } from '../chunk/ZV6G25TT.js';
import { createComponent } from 'solid-js/web';
import { createContext, createMemo, useContext, createUniqueId, createSignal, mergeProps, splitProps, onCleanup, createEffect, untrack } from 'solid-js';

var DismissibleContext = createContext();
var Dismissible = (props) => {
  const memoizedDismissible = createMemo(() => {
    const upperContext = useContext(DismissibleContext);
    if (upperContext) {
      return createComponent(DismissibleLayer, props);
    }
    const layerId = createUniqueId();
    const [layers, setLayers] = createSignal([layerId]);
    const onLayerShow = (layerId2) => {
      setLayers((layers2) => [...layers2, layerId2]);
    };
    const onLayerDismiss = (layerId2) => {
      setLayers((layers2) => layers2.filter((layer) => layer !== layerId2));
    };
    return createComponent(DismissibleContext.Provider, {
      value: {
        layers,
        onLayerShow,
        onLayerDismiss
      },
      get children() {
        return createComponent(DismissibleLayer, props);
      }
    });
  });
  return memoizedDismissible;
};
var DismissibleLayer = (props) => {
  const defaultedProps = mergeProps({
    enabled: true,
    dismissOnEscapeKeyDown: true,
    dismissOnOutsidePointer: true,
    dismissOnOutsidePointerStrategy: "pointerup",
    noOutsidePointerEvents: true
  }, props);
  const [localProps, otherProps] = splitProps(defaultedProps, ["enabled", "children", "dismissOnEscapeKeyDown", "dismissOnOutsidePointer", "dismissOnOutsidePointerStrategy", "dismissOnOutsidePointerIgnore", "noOutsidePointerEvents", "onDismiss"]);
  const context = useContext(DismissibleContext);
  const layerId = createUniqueId();
  onCleanup(() => {
    context.onLayerDismiss(layerId);
  });
  createEffect(() => {
    if (localProps.enabled) {
      context.onLayerShow(layerId);
    } else {
      context.onLayerDismiss(layerId);
    }
  });
  const isLastLayer = () => {
    return context.layers()[context.layers().length - 1] === layerId;
  };
  dismissible_default({
    dismissOnEscapeKeyDown: () => access(localProps.dismissOnEscapeKeyDown) && isLastLayer() && localProps.enabled,
    dismissOnOutsidePointer: () => access(localProps.dismissOnOutsidePointer) && isLastLayer() && localProps.enabled,
    dismissOnOutsidePointerStrategy: localProps.dismissOnOutsidePointerStrategy,
    dismissOnOutsidePointerIgnore: localProps.dismissOnOutsidePointerIgnore,
    noOutsidePointerEvents: () => access(localProps.noOutsidePointerEvents) && localProps.enabled,
    onDismiss: (reason) => {
      localProps.onDismiss(reason);
    },
    ...otherProps
  });
  const memoizedChildren = createMemo(() => localProps.children);
  const resolveChildren = () => {
    const children = memoizedChildren();
    if (isFunction(children)) {
      return children({
        get isLastLayer() {
          return isLastLayer();
        }
      });
    }
    return children;
  };
  return untrack(() => resolveChildren());
};
var Dismissible_default = Dismissible;

export { Dismissible_default as default };
