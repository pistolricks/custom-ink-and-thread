import { M as MaybeAccessor } from '../types-CfOU1RES.js';

type CreateDismissableProps = {
    /**
     * The element to make dismissable.
     */
    element: MaybeAccessor<HTMLElement | null>;
    /**
     * Callback fired when the element is being dismissed.
     */
    onDismiss: (reason: 'escapeKey' | 'pointerOutside') => void;
    /**
     * Whether to dismiss the element when the escape key is pressed.
     * @defaultValue `true`
     */
    dismissOnEscapeKeyDown?: MaybeAccessor<boolean>;
    /**
     * Whether to dismiss the element when a pointer down event happens outside the element.
     * @defaultValue `true`
     */
    dismissOnOutsidePointer?: MaybeAccessor<boolean>;
    /**
     * Whether `closeOnOutsidePointer` should be triggered on `pointerdown` or `pointerup`.
     * @defaultValue `pointerup`
     */
    dismissOnOutsidePointerStrategy?: MaybeAccessor<'pointerdown' | 'pointerup'>;
    /**
     * Ignore pointer events that occur inside of this element.
     */
    dismissOnOutsidePointerIgnore?: MaybeAccessor<HTMLElement | null>;
    /**
     * Whether to disable pointer events outside the element.
     * @defaultValue `true`
     */
    noOutsidePointerEvents?: MaybeAccessor<boolean>;
    /**
     * Callback fired when the escape key is pressed. Can be prevented by calling `event.preventDefault`.
     */
    onEscapeKeyDown?: (event: KeyboardEvent) => void;
    /**
     * Callback fired when a pointer down event happens outside the element. Can be prevented by calling `event.preventDefault`.
     */
    onOutsidePointer?: (event: MouseEvent) => void;
};
/**
 * Creates a dismissible element that can be dismissed by pressing the escape key or clicking outside the element.
 *
 * @param props.element - The element to make dismissable.
 * @param props.onDismiss - Callback fired when the element is being dismissed.
 * @param props.dismissOnEscapeKeyDown - Whether to dismiss the element when the escape key is pressed. *Default = `true`*
 * @param props.dismissOnOutsidePointer - Whether to dismiss the element when a pointer down event happens outside the element. *Default = `true`*
 * @param props.closeOnOutsidePointerStrategy - Whether `closeOnOutsidePointer` should be triggered on `pointerdown` or `pointerup`. *Default = `pointerup`*
 * @param props.noOutsidePointerEvents - Whether to disable pointer events outside the element. *Default = `true`*
 * @param props.onEscapeKeyDown - Callback fired when the escape key is pressed. Can be prevented by calling `event.preventDefault`.
 * @param props.onOutsidePointer - Callback fired when a pointer down event happens outside the element. Can be prevented by calling `event.preventDefault`.
 */
declare const createDismissible: (props: CreateDismissableProps) => void;

export { type CreateDismissableProps, createDismissible as default };
