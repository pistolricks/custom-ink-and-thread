import { sortByDocumentPosition } from '../chunk/3ILNQQ4T.js';
import { access } from '../chunk/ZV6G25TT.js';
import { mergeProps, createSignal, createMemo } from 'solid-js';

var createNavigation = (props) => {
  const defaultedProps = mergeProps(
    { loop: true, orientation: "vertical" },
    props
  );
  const [elements, setElements] = createSignal([]);
  const sortedElements = createMemo(() => {
    return elements().filter((element) => !element.hasAttribute("disabled")).sort(sortByDocumentPosition);
  });
  const register = (element) => {
    setElements((elements2) => [...elements2, element]);
  };
  const unregister = (element) => {
    setElements((elements2) => elements2.filter((e) => e !== element));
  };
  const onKeyDown = (event) => {
    const target = event.target;
    const textDirection = window.getComputedStyle(target).direction;
    const _sortedElements = sortedElements();
    if (_sortedElements.length < 2) return;
    const firstElement = _sortedElements[0];
    const lastElement = _sortedElements[_sortedElements.length - 1];
    if (getNextKey(access(defaultedProps.orientation), textDirection) === event.key) {
      event.preventDefault();
      const index = _sortedElements.indexOf(target);
      if (index === _sortedElements.length - 1) {
        if (access(defaultedProps.loop)) {
          firstElement.focus();
        }
      } else {
        _sortedElements[index + 1].focus();
      }
      return;
    }
    if (getPreviousKey(access(defaultedProps.orientation), textDirection) === event.key) {
      event.preventDefault();
      const index = _sortedElements.indexOf(target);
      if (index === 0) {
        if (access(defaultedProps.loop)) {
          lastElement.focus();
        }
      } else {
        _sortedElements[index - 1].focus();
      }
      return;
    }
    if (event.key === "Home") {
      event.preventDefault();
      if (firstElement !== target) {
        firstElement.focus();
      }
      return;
    }
    if (event.key === "End") {
      event.preventDefault();
      if (lastElement !== target) {
        lastElement.focus();
      }
      return;
    }
  };
  return {
    register,
    unregister,
    onKeyDown
  };
};
var getNextKey = (direction, textDirection) => {
  if (direction === "vertical") {
    return "ArrowDown";
  }
  return textDirection === "ltr" ? "ArrowRight" : "ArrowLeft";
};
var getPreviousKey = (direction, textDirection) => {
  if (direction === "vertical") {
    return "ArrowUp";
  }
  return textDirection === "ltr" ? "ArrowLeft" : "ArrowRight";
};
var navigation_default = createNavigation;

export { navigation_default as default };
