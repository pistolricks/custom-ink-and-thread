import * as solid_js from 'solid-js';
import { ValidComponent, Accessor, JSX, Component } from 'solid-js';
import { DynamicProps } from '@corvu/utils/dynamic';
export { DynamicProps } from '@corvu/utils/dynamic';
import { Ref, ElementOf } from '@corvu/utils/dom';
import { FloatingArrowSharedElementProps, FloatingArrowElementProps } from '@corvu/utils/components/FloatingArrow';
import { CloseCorvuProps, CloseSharedElementProps, CloseElementProps, ContentCorvuProps, ContentSharedElementProps, ContentElementProps, DescriptionCorvuProps, DescriptionSharedElementProps, DescriptionElementProps, LabelCorvuProps, LabelSharedElementProps, LabelElementProps, OverlayCorvuProps, OverlaySharedElementProps, OverlayElementProps, RootChildrenProps, RootProps, TriggerCorvuProps, TriggerSharedElementProps, TriggerElementProps, PortalProps, ContextValue } from '@corvu/dialog';
export { ContextValue as DialogContextValue, Portal, PortalProps, useContext as useDialogContext } from '@corvu/dialog';
import { Placement, Strategy } from '@floating-ui/dom';
import { FloatingOptions, FloatingState } from '@corvu/utils/create/floating';
export { FloatingOptions, FloatingState } from '@corvu/utils/create/floating';

type PopoverAnchorCorvuProps = {
    /**
     * The `id` of the popover context to use.
     */
    contextId?: string;
};
type PopoverAnchorSharedElementProps<T extends ValidComponent = 'div'> = {
    ref: Ref<ElementOf<T>>;
};
type PopoverAnchorElementProps = PopoverAnchorSharedElementProps & {
    'data-corvu-popover-anchor': '';
};
type PopoverAnchorProps<T extends ValidComponent = 'div'> = PopoverAnchorCorvuProps & Partial<PopoverAnchorSharedElementProps<T>>;
/** Anchor element to override the floating reference.
 *
 * @data `data-corvu-popover-anchor` - Present on every popover anchor element.
 */
declare const PopoverAnchor: <T extends ValidComponent = "div">(props: DynamicProps<T, PopoverAnchorProps<T>>) => solid_js.JSX.Element;

type PopoverArrowCorvuProps = {
    /**
     * Size of the arrow in px.
     * @defaultValue 16
     */
    size?: number;
    /**
     * The `id` of the popover context to use.
     */
    contextId?: string;
};
type PopoverArrowSharedElementProps<T extends ValidComponent = 'div'> = {
    ref: Ref<ElementOf<T>>;
} & FloatingArrowSharedElementProps<T>;
type PopoverArrowElementProps = PopoverArrowSharedElementProps & {
    'data-corvu-popover-arrow': '';
} & FloatingArrowElementProps;
type PopoverArrowProps<T extends ValidComponent = 'div'> = PopoverArrowCorvuProps & Partial<PopoverArrowSharedElementProps<T>>;
/** Arrow element that automatically points towards the floating reference. Comes with a default arrow svg, but can be overridden by providing your own as the children.
 *
 * @data `data-corvu-popover-arrow` - Present on every popover arrow element.
 */
declare const PopoverArrow: <T extends ValidComponent = "div">(props: DynamicProps<T, PopoverArrowProps<T>>) => solid_js.JSX.Element;

type PopoverCloseCorvuProps = CloseCorvuProps;
type PopoverCloseSharedElementProps<T extends ValidComponent = 'button'> = CloseSharedElementProps<T>;
type PopoverCloseElementProps = PopoverCloseSharedElementProps & {
    'data-corvu-popover-close': '';
} & CloseElementProps;
type PopoverCloseProps<T extends ValidComponent = 'button'> = PopoverCloseCorvuProps & Partial<PopoverCloseSharedElementProps<T>>;
/** Close button that changes the open state to false when clicked.
 *
 * @data `data-corvu-popover-close` - Present on every popover close element.
 */
declare const PopoverClose: <T extends ValidComponent = "button">(props: DynamicProps<T, PopoverCloseProps<T>>) => solid_js.JSX.Element;

type PopoverContentCorvuProps = ContentCorvuProps;
type PopoverContentSharedElementProps<T extends ValidComponent = 'div'> = ContentSharedElementProps<T>;
type PopoverContentElementProps = PopoverContentSharedElementProps & {
    'data-placement': Placement;
    'data-corvu-popover-content': '';
} & ContentElementProps;
type PopoverContentProps<T extends ValidComponent = 'button'> = PopoverContentCorvuProps & Partial<PopoverContentSharedElementProps<T>>;
/** Content of the popover. Can be animated.
 *
 * @data `data-corvu-popover-content` - Present on every popover content element.
 * @data `data-open` - Present when the popover is open.
 * @data `data-closed` - Present when the popover is closed.
 * @data `data-placement` - Current placement of the popover.
 */
declare const PopoverContent: <T extends ValidComponent = "div">(props: DynamicProps<T, PopoverContentProps<T>>) => solid_js.JSX.Element;

type PopoverDescriptionCorvuProps = DescriptionCorvuProps;
type PopoverDescriptionSharedElementProps<T extends ValidComponent = 'p'> = DescriptionSharedElementProps<T>;
type PopoverDescriptionElementProps = PopoverDescriptionSharedElementProps & {
    'data-corvu-popover-description': '';
} & DescriptionElementProps;
type PopoverDescriptionProps<T extends ValidComponent = 'p'> = PopoverDescriptionCorvuProps & Partial<PopoverDescriptionSharedElementProps<T>>;
/** Description element to announce the popover to accessibility tools.
 *
 * @data `data-corvu-popover-description` - Present on every popover description element.
 */
declare const PopoverDescription: <T extends ValidComponent = "p">(props: DynamicProps<T, PopoverDescriptionProps<T>>) => solid_js.JSX.Element;

type PopoverLabelCorvuProps = LabelCorvuProps;
type PopoverLabelSharedElementProps<T extends ValidComponent = 'h2'> = LabelSharedElementProps<T>;
type PopoverLabelElementProps = PopoverLabelSharedElementProps & {
    'data-corvu-popover-label': '';
} & LabelElementProps;
type PopoverLabelProps<T extends ValidComponent = 'h2'> = PopoverLabelCorvuProps & Partial<PopoverLabelSharedElementProps<T>>;
/** Label element to announce the popover to accessibility tools.
 *
 * @data `data-corvu-popover-label` - Present on every popover label element.
 */
declare const PopoverLabel: <T extends ValidComponent = "h2">(props: DynamicProps<T, PopoverLabelProps<T>>) => solid_js.JSX.Element;

type PopoverOverlayCorvuProps = OverlayCorvuProps;
type PopoverOverlaySharedElementProps<T extends ValidComponent = 'div'> = OverlaySharedElementProps<T>;
type PopoverOverlayElementProps = PopoverOverlaySharedElementProps & {
    'data-corvu-popover-overlay': '';
} & OverlayElementProps;
type PopoverOverlayProps<T extends ValidComponent = 'div'> = PopoverOverlayCorvuProps & Partial<PopoverOverlaySharedElementProps<T>>;
/** Component which can be used to create a faded background. Can be animated.
 *
 * @data `data-corvu-popover-overlay` - Present on every popover overlay element.
 * @data `data-open` - Present when the popover is open.
 * @data `data-closed` - Present when the popover is closed.
 */
declare const PopoverOverlay: <T extends ValidComponent = "div">(props: DynamicProps<T, PopoverOverlayProps<T>>) => solid_js.JSX.Element;

type PopoverContextValue = {
    /** The initial placement of the popover. */
    placement: Accessor<Placement>;
    /** The strategy to use when positioning the popover. */
    strategy: Accessor<Strategy>;
    /** Floating options of the popover. */
    floatingOptions: Accessor<FloatingOptions | null>;
    /** The current floating state of the popover. */
    floatingState: Accessor<FloatingState>;
};
/** Context which exposes various properties to interact with the popover. Optionally provide a contextId to access a keyed context. */
declare const usePopoverContext: (contextId?: string) => PopoverContextValue;

type PopoverRootProps = {
    /**
     * The initial placement of the popover.
     * @defaultValue `'bottom'`
     */
    placement?: Placement;
    /**
     * The strategy to use when positioning the popover.
     * @defaultValue `'absolute'`
     */
    strategy?: Strategy;
    /**
     * Floating options of the popover.
     * @defaultValue `{ flip: true, shift: true }`
     */
    floatingOptions?: FloatingOptions | null;
    /** @hidden */
    children: JSX.Element | ((props: PopoverRootChildrenProps & RootChildrenProps) => JSX.Element);
} & Omit<RootProps, 'children'>;
/** Props that are passed to the Root component children callback. */
type PopoverRootChildrenProps = {
    /** The initial placement of the popover. */
    placement: Placement;
    /** The strategy to use when positioning the popover. */
    strategy: Strategy;
    /** Floating options of the popover. */
    floatingOptions: FloatingOptions | null;
    /** The current floating state of the popover. */
    floatingState: FloatingState;
};
/** Context wrapper for the popover. Is required for every popover you create. */
declare const PopoverRoot: Component<PopoverRootProps>;

type PopoverTriggerCorvuProps = TriggerCorvuProps;
type PopoverTriggerSharedElementProps<T extends ValidComponent = 'button'> = TriggerSharedElementProps<T>;
type PopoverTriggerElementProps = PopoverTriggerSharedElementProps & {
    'data-placement': Placement | undefined;
    'data-corvu-popover-trigger': '';
} & TriggerElementProps;
type PopoverTriggerProps<T extends ValidComponent = 'button'> = PopoverTriggerCorvuProps & Partial<PopoverTriggerSharedElementProps<T>>;
/** Button that changes the open state of the popover when clicked.
 *
 * @data `data-corvu-popover-trigger` - Present on every popover trigger element.
 * @data `data-open` - Present when the popover is open.
 * @data `data-closed` - Present when the popover is closed.
 * @data `data-placement` - Current placement of the popover. Only present when the popover is open.
 */
declare const PopoverTrigger: <T extends ValidComponent = "button">(props: DynamicProps<T, PopoverTriggerProps<T>>) => solid_js.JSX.Element;

declare const Popover: solid_js.Component<PopoverRootProps> & {
    Anchor: <T extends solid_js.ValidComponent = "div">(props: DynamicProps<T, PopoverAnchorProps<T>>) => solid_js.JSX.Element;
    Trigger: <T_1 extends solid_js.ValidComponent = "button">(props: DynamicProps<T_1, PopoverTriggerProps<T_1>>) => solid_js.JSX.Element;
    Portal: (props: PortalProps & {
        mount?: Node | undefined;
        useShadow?: boolean | undefined;
        isSVG?: boolean | undefined;
        ref?: HTMLDivElement | SVGGElement | ((el: ({} | {
            readonly shadowRoot: ShadowRoot;
        }) & (HTMLDivElement | SVGGElement)) => void) | undefined;
        children: solid_js.JSX.Element;
    }) => solid_js.JSX.Element;
    Overlay: <T_2 extends solid_js.ValidComponent = "div">(props: DynamicProps<T_2, PopoverOverlayProps<T_2>>) => solid_js.JSX.Element;
    Content: <T_3 extends solid_js.ValidComponent = "div">(props: DynamicProps<T_3, PopoverContentProps<T_3>>) => solid_js.JSX.Element;
    Arrow: <T_4 extends solid_js.ValidComponent = "div">(props: DynamicProps<T_4, PopoverArrowProps<T_4>>) => solid_js.JSX.Element;
    Label: <T_5 extends solid_js.ValidComponent = "h2">(props: DynamicProps<T_5, PopoverLabelProps<T_5>>) => solid_js.JSX.Element;
    Description: <T_6 extends solid_js.ValidComponent = "p">(props: DynamicProps<T_6, PopoverDescriptionProps<T_6>>) => solid_js.JSX.Element;
    Close: <T_7 extends solid_js.ValidComponent = "button">(props: DynamicProps<T_7, PopoverCloseProps<T_7>>) => solid_js.JSX.Element;
    useContext: (contextId?: string | undefined) => PopoverContextValue;
    useDialogContext: (contextId?: string | undefined) => ContextValue;
};

export { PopoverAnchor as Anchor, type PopoverAnchorCorvuProps as AnchorCorvuProps, type PopoverAnchorElementProps as AnchorElementProps, type PopoverAnchorProps as AnchorProps, type PopoverAnchorSharedElementProps as AnchorSharedElementProps, PopoverArrow as Arrow, type PopoverArrowCorvuProps as ArrowCorvuProps, type PopoverArrowElementProps as ArrowElementProps, type PopoverArrowProps as ArrowProps, type PopoverArrowSharedElementProps as ArrowSharedElementProps, PopoverClose as Close, type PopoverCloseCorvuProps as CloseCorvuProps, type PopoverCloseElementProps as CloseElementProps, type PopoverCloseProps as CloseProps, type PopoverCloseSharedElementProps as CloseSharedElementProps, PopoverContent as Content, type PopoverContentCorvuProps as ContentCorvuProps, type PopoverContentElementProps as ContentElementProps, type PopoverContentProps as ContentProps, type PopoverContentSharedElementProps as ContentSharedElementProps, type PopoverContextValue as ContextValue, PopoverDescription as Description, type PopoverDescriptionCorvuProps as DescriptionCorvuProps, type PopoverDescriptionElementProps as DescriptionElementProps, type PopoverDescriptionProps as DescriptionProps, type PopoverDescriptionSharedElementProps as DescriptionSharedElementProps, PopoverLabel as Label, type PopoverLabelCorvuProps as LabelCorvuProps, type PopoverLabelElementProps as LabelElementProps, type PopoverLabelProps as LabelProps, type PopoverLabelSharedElementProps as LabelSharedElementProps, PopoverOverlay as Overlay, type PopoverOverlayCorvuProps as OverlayCorvuProps, type PopoverOverlayElementProps as OverlayElementProps, type PopoverOverlayProps as OverlayProps, type PopoverOverlaySharedElementProps as OverlaySharedElementProps, PopoverRoot as Root, type PopoverRootChildrenProps as RootChildrenProps, type PopoverRootProps as RootProps, PopoverTrigger as Trigger, type PopoverTriggerCorvuProps as TriggerCorvuProps, type PopoverTriggerElementProps as TriggerElementProps, type PopoverTriggerProps as TriggerProps, type PopoverTriggerSharedElementProps as TriggerSharedElementProps, Popover as default, usePopoverContext as useContext };
