// src/Anchor.tsx
import { createMemo, splitProps } from "solid-js";
import { Dynamic } from "@corvu/utils/dynamic";
import { mergeRefs } from "@corvu/utils/reactivity";

// src/context.ts
import { createContext, useContext } from "solid-js";
import {
  createKeyedContext,
  useKeyedContext
} from "@corvu/utils/create/keyedContext";
var PopoverContext = createContext();
var createPopoverContext = (contextId) => {
  if (contextId === void 0)
    return PopoverContext;
  const context = createKeyedContext(
    `popover-${contextId}`
  );
  return context;
};
var usePopoverContext = (contextId) => {
  if (contextId === void 0) {
    const context2 = useContext(PopoverContext);
    if (!context2) {
      throw new Error(
        "[corvu]: Popover context not found. Make sure to wrap Popover components in <Popover.Root>"
      );
    }
    return context2;
  }
  const context = useKeyedContext(`popover-${contextId}`);
  if (!context) {
    throw new Error(
      `[corvu]: Popover context with id "${contextId}" not found. Make sure to wrap Popover components in <Popover.Root contextId="${contextId}">`
    );
  }
  return context;
};
var InternalPopoverContext = createContext();
var createInternalPopoverContext = (contextId) => {
  if (contextId === void 0)
    return InternalPopoverContext;
  const context = createKeyedContext(
    `popover-internal-${contextId}`
  );
  return context;
};
var useInternalPopoverContext = (contextId) => {
  if (contextId === void 0) {
    const context2 = useContext(InternalPopoverContext);
    if (!context2) {
      throw new Error(
        "[corvu]: Popover context not found. Make sure to wrap Popover components in <Popover.Root>"
      );
    }
    return context2;
  }
  const context = useKeyedContext(
    `popover-internal-${contextId}`
  );
  if (!context) {
    throw new Error(
      `[corvu]: Popover context with id "${contextId}" not found. Make sure to wrap Popover components in <Popover.Root contextId="${contextId}">`
    );
  }
  return context;
};

// src/Anchor.tsx
var PopoverAnchor = (props) => {
  const [localProps, otherProps] = splitProps(props, [
    "contextId",
    "ref"
  ]);
  const context = createMemo(
    () => useInternalPopoverContext(localProps.contextId)
  );
  return <Dynamic
    as="div"
    ref={mergeRefs(context().setAnchorRef, localProps.ref)}
    data-corvu-popover-anchor=""
    {...otherProps}
  />;
};
var Anchor_default = PopoverAnchor;

// src/Arrow.tsx
import {
  createMemo as createMemo2,
  splitProps as splitProps2
} from "solid-js";
import FloatingArrow from "@corvu/utils/components/FloatingArrow";
import { mergeRefs as mergeRefs2 } from "@corvu/utils/reactivity";
var PopoverArrow = (props) => {
  const [localProps, otherProps] = splitProps2(props, [
    "contextId",
    "ref"
  ]);
  const context = createMemo2(
    () => useInternalPopoverContext(localProps.contextId)
  );
  return <FloatingArrow
    floatingState={context().floatingState()}
    ref={mergeRefs2(context().setArrowRef, localProps.ref)}
    data-corvu-popover-arrow=""
    {...otherProps}
  />;
};
var Arrow_default = PopoverArrow;

// src/Close.tsx
import Dialog from "@corvu/dialog";
var PopoverClose = (props) => {
  return <Dialog.Close
    data-corvu-popover-close=""
    data-corvu-dialog-close={null}
    {...props}
  />;
};
var Close_default = PopoverClose;

// src/Content.tsx
import {
  createMemo as createMemo3,
  splitProps as splitProps3
} from "solid-js";
import { combineStyle } from "@corvu/utils/dom";
import Dialog2 from "@corvu/dialog";
import { getFloatingStyle } from "@corvu/utils/floating";
var PopoverContent = (props) => {
  const [localProps, otherProps] = splitProps3(props, [
    "forceMount",
    "contextId",
    "style"
  ]);
  const context = createMemo3(
    () => useInternalPopoverContext(localProps.contextId)
  );
  return <Dialog2.Content
    contextId={localProps.contextId}
    style={combineStyle(
      {
        ...getFloatingStyle({
          strategy: () => context().strategy(),
          floatingState: () => context().floatingState()
        })()
      },
      localProps.style
    )}
    data-placement={context().floatingState().placement}
    data-corvu-popover-content=""
    data-corvu-dialog-content={null}
    {...otherProps}
  />;
};
var Content_default = PopoverContent;

// src/Description.tsx
import Dialog3 from "@corvu/dialog";
var PopoverDescription = (props) => {
  return <Dialog3.Description
    data-corvu-popover-description=""
    data-corvu-dialog-description={null}
    {...props}
  />;
};
var Description_default = PopoverDescription;

// src/index.ts
import {
  Portal,
  useContext as useDialogContext
} from "@corvu/dialog";

// src/Label.tsx
import Dialog4 from "@corvu/dialog";
var PopoverLabel = (props) => {
  return <Dialog4.Label
    data-corvu-popover-label=""
    data-corvu-dialog-label={null}
    {...props}
  />;
};
var Label_default = PopoverLabel;

// src/Overlay.tsx
import Dialog5 from "@corvu/dialog";
var PopoverOverlay = (props) => {
  return <Dialog5.Overlay
    data-corvu-popover-overlay=""
    data-corvu-dialog-overlay={null}
    {...props}
  />;
};
var Overlay_default = PopoverOverlay;

// src/Root.tsx
import {
  createMemo as createMemo4,
  createSignal,
  mergeProps,
  splitProps as splitProps4,
  untrack
} from "solid-js";
import Dialog6 from "@corvu/dialog";
import createFloating from "@corvu/utils/create/floating";
import createOnce from "@corvu/utils/create/once";
import { isFunction } from "@corvu/utils";
var PopoverRoot = (props) => {
  const defaultedProps = mergeProps(
    {
      placement: "bottom",
      strategy: "absolute",
      floatingOptions: {
        flip: true,
        shift: true
      },
      modal: false,
      closeOnOutsidePointer: true
    },
    props
  );
  const [localProps, otherProps] = splitProps4(defaultedProps, [
    "placement",
    "strategy",
    "floatingOptions",
    "contextId",
    "children"
  ]);
  const [dialogContext, setDialogContext] = createSignal();
  const [anchorRef, setAnchorRef] = createSignal(null);
  const [triggerRef, setTriggerRef] = createSignal(null);
  const [arrowRef, setArrowRef] = createSignal(null);
  const floatingState = createFloating({
    enabled: () => dialogContext()?.contentPresent() ?? false,
    floating: () => dialogContext()?.contentRef() ?? null,
    reference: () => anchorRef() ?? triggerRef() ?? null,
    arrow: arrowRef,
    placement: () => localProps.placement,
    strategy: () => localProps.strategy,
    options: () => localProps.floatingOptions
  });
  const childrenProps = {
    get placement() {
      return localProps.placement;
    },
    get strategy() {
      return localProps.strategy;
    },
    get floatingOptions() {
      return localProps.floatingOptions;
    },
    get floatingState() {
      return floatingState();
    }
  };
  const memoizedChildren = createOnce(() => localProps.children);
  const resolveChildren = (dialogChildrenProps) => {
    setDialogContext(Dialog6.useContext(localProps.contextId));
    const children = memoizedChildren()();
    if (isFunction(children)) {
      const mergedProps = mergeProps(dialogChildrenProps, childrenProps);
      return children(mergedProps);
    }
    return children;
  };
  const memoizedPopoverRoot = createMemo4(() => {
    const PopoverContext2 = createPopoverContext(localProps.contextId);
    const InternalPopoverContext2 = createInternalPopoverContext(
      localProps.contextId
    );
    return untrack(() => <PopoverContext2.Provider
      value={{
        placement: () => localProps.placement,
        strategy: () => localProps.strategy,
        floatingOptions: () => localProps.floatingOptions,
        floatingState
      }}
    ><InternalPopoverContext2.Provider
      value={{
        placement: () => localProps.placement,
        strategy: () => localProps.strategy,
        floatingOptions: () => localProps.floatingOptions,
        floatingState,
        setAnchorRef,
        setTriggerRef,
        setArrowRef
      }}
    ><Dialog6 contextId={localProps.contextId} {...otherProps}>{(dialogChildrenProps) => resolveChildren(dialogChildrenProps)}</Dialog6></InternalPopoverContext2.Provider></PopoverContext2.Provider>);
  });
  return memoizedPopoverRoot;
};
var Root_default = PopoverRoot;

// src/Trigger.tsx
import {
  createMemo as createMemo5,
  splitProps as splitProps5
} from "solid-js";
import Dialog7 from "@corvu/dialog";
import { mergeRefs as mergeRefs3 } from "@corvu/utils/reactivity";
var PopoverTrigger = (props) => {
  const [localProps, otherProps] = splitProps5(props, [
    "ref",
    "contextId"
  ]);
  const dialogContext = createMemo5(
    () => Dialog7.useContext(localProps.contextId)
  );
  const context = createMemo5(
    () => useInternalPopoverContext(localProps.contextId)
  );
  return <Dialog7.Trigger
    contextId={localProps.contextId}
    ref={mergeRefs3(context().setTriggerRef, localProps.ref)}
    data-placement={dialogContext().open() ? context().floatingState().placement : void 0}
    data-corvu-popover-trigger=""
    data-corvu-dialog-trigger={null}
    {...otherProps}
  />;
};
var Trigger_default = PopoverTrigger;

// src/index.ts
var Popover = Object.assign(Root_default, {
  Anchor: Anchor_default,
  Trigger: Trigger_default,
  Portal,
  Overlay: Overlay_default,
  Content: Content_default,
  Arrow: Arrow_default,
  Label: Label_default,
  Description: Description_default,
  Close: Close_default,
  useContext: usePopoverContext,
  useDialogContext
});
var src_default = Popover;
export {
  Anchor_default as Anchor,
  Arrow_default as Arrow,
  Close_default as Close,
  Content_default as Content,
  Description_default as Description,
  Label_default as Label,
  Overlay_default as Overlay,
  Portal,
  Root_default as Root,
  Trigger_default as Trigger,
  src_default as default,
  usePopoverContext as useContext,
  useDialogContext
};
