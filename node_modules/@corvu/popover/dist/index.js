import { createComponent, mergeProps, memo } from 'solid-js/web';
import { createContext, useContext as useContext$1, splitProps, createMemo, mergeProps as mergeProps$1, createSignal, untrack } from 'solid-js';
import { Dynamic } from '@corvu/utils/dynamic';
import { mergeRefs } from '@corvu/utils/reactivity';
import { useKeyedContext, createKeyedContext } from '@corvu/utils/create/keyedContext';
import FloatingArrow from '@corvu/utils/components/FloatingArrow';
import Dialog6, { Portal, useContext } from '@corvu/dialog';
export { Portal, useContext as useDialogContext } from '@corvu/dialog';
import { combineStyle } from '@corvu/utils/dom';
import { getFloatingStyle } from '@corvu/utils/floating';
import createFloating from '@corvu/utils/create/floating';
import createOnce from '@corvu/utils/create/once';
import { isFunction } from '@corvu/utils';

// src/Anchor.tsx
var PopoverContext = createContext();
var createPopoverContext = (contextId) => {
  if (contextId === void 0)
    return PopoverContext;
  const context = createKeyedContext(
    `popover-${contextId}`
  );
  return context;
};
var usePopoverContext = (contextId) => {
  if (contextId === void 0) {
    const context2 = useContext$1(PopoverContext);
    if (!context2) {
      throw new Error(
        "[corvu]: Popover context not found. Make sure to wrap Popover components in <Popover.Root>"
      );
    }
    return context2;
  }
  const context = useKeyedContext(`popover-${contextId}`);
  if (!context) {
    throw new Error(
      `[corvu]: Popover context with id "${contextId}" not found. Make sure to wrap Popover components in <Popover.Root contextId="${contextId}">`
    );
  }
  return context;
};
var InternalPopoverContext = createContext();
var createInternalPopoverContext = (contextId) => {
  if (contextId === void 0)
    return InternalPopoverContext;
  const context = createKeyedContext(
    `popover-internal-${contextId}`
  );
  return context;
};
var useInternalPopoverContext = (contextId) => {
  if (contextId === void 0) {
    const context2 = useContext$1(InternalPopoverContext);
    if (!context2) {
      throw new Error(
        "[corvu]: Popover context not found. Make sure to wrap Popover components in <Popover.Root>"
      );
    }
    return context2;
  }
  const context = useKeyedContext(
    `popover-internal-${contextId}`
  );
  if (!context) {
    throw new Error(
      `[corvu]: Popover context with id "${contextId}" not found. Make sure to wrap Popover components in <Popover.Root contextId="${contextId}">`
    );
  }
  return context;
};

// src/Anchor.tsx
var PopoverAnchor = (props) => {
  const [localProps, otherProps] = splitProps(props, ["contextId", "ref"]);
  const context = createMemo(() => useInternalPopoverContext(localProps.contextId));
  return createComponent(Dynamic, mergeProps({
    as: "div",
    ref(r$) {
      var _ref$ = mergeRefs(context().setAnchorRef, localProps.ref);
      typeof _ref$ === "function" && _ref$(r$);
    },
    "data-corvu-popover-anchor": ""
  }, otherProps));
};
var Anchor_default = PopoverAnchor;
var PopoverArrow = (props) => {
  const [localProps, otherProps] = splitProps(props, ["contextId", "ref"]);
  const context = createMemo(() => useInternalPopoverContext(localProps.contextId));
  return createComponent(FloatingArrow, mergeProps({
    get floatingState() {
      return context().floatingState();
    },
    ref(r$) {
      var _ref$ = mergeRefs(context().setArrowRef, localProps.ref);
      typeof _ref$ === "function" && _ref$(r$);
    },
    "data-corvu-popover-arrow": ""
  }, otherProps));
};
var Arrow_default = PopoverArrow;
var PopoverClose = (props) => {
  return createComponent(Dialog6.Close, mergeProps({
    "data-corvu-popover-close": "",
    "data-corvu-dialog-close": null
  }, props));
};
var Close_default = PopoverClose;
var PopoverContent = (props) => {
  const [localProps, otherProps] = splitProps(props, ["forceMount", "contextId", "style"]);
  const context = createMemo(() => useInternalPopoverContext(localProps.contextId));
  return createComponent(Dialog6.Content, mergeProps({
    get contextId() {
      return localProps.contextId;
    },
    get style() {
      return combineStyle({
        ...getFloatingStyle({
          strategy: () => context().strategy(),
          floatingState: () => context().floatingState()
        })()
      }, localProps.style);
    },
    get ["data-placement"]() {
      return context().floatingState().placement;
    },
    "data-corvu-popover-content": "",
    "data-corvu-dialog-content": null
  }, otherProps));
};
var Content_default = PopoverContent;
var PopoverDescription = (props) => {
  return createComponent(Dialog6.Description, mergeProps({
    "data-corvu-popover-description": "",
    "data-corvu-dialog-description": null
  }, props));
};
var Description_default = PopoverDescription;
var PopoverLabel = (props) => {
  return createComponent(Dialog6.Label, mergeProps({
    "data-corvu-popover-label": "",
    "data-corvu-dialog-label": null
  }, props));
};
var Label_default = PopoverLabel;
var PopoverOverlay = (props) => {
  return createComponent(Dialog6.Overlay, mergeProps({
    "data-corvu-popover-overlay": "",
    "data-corvu-dialog-overlay": null
  }, props));
};
var Overlay_default = PopoverOverlay;
var PopoverRoot = (props) => {
  const defaultedProps = mergeProps$1({
    placement: "bottom",
    strategy: "absolute",
    floatingOptions: {
      flip: true,
      shift: true
    },
    modal: false,
    closeOnOutsidePointer: true
  }, props);
  const [localProps, otherProps] = splitProps(defaultedProps, ["placement", "strategy", "floatingOptions", "contextId", "children"]);
  const [dialogContext, setDialogContext] = createSignal();
  const [anchorRef, setAnchorRef] = createSignal(null);
  const [triggerRef, setTriggerRef] = createSignal(null);
  const [arrowRef, setArrowRef] = createSignal(null);
  const floatingState = createFloating({
    enabled: () => dialogContext()?.contentPresent() ?? false,
    floating: () => dialogContext()?.contentRef() ?? null,
    reference: () => anchorRef() ?? triggerRef() ?? null,
    arrow: arrowRef,
    placement: () => localProps.placement,
    strategy: () => localProps.strategy,
    options: () => localProps.floatingOptions
  });
  const childrenProps = {
    get placement() {
      return localProps.placement;
    },
    get strategy() {
      return localProps.strategy;
    },
    get floatingOptions() {
      return localProps.floatingOptions;
    },
    get floatingState() {
      return floatingState();
    }
  };
  const memoizedChildren = createOnce(() => localProps.children);
  const resolveChildren = (dialogChildrenProps) => {
    setDialogContext(Dialog6.useContext(localProps.contextId));
    const children = memoizedChildren()();
    if (isFunction(children)) {
      const mergedProps = mergeProps$1(dialogChildrenProps, childrenProps);
      return children(mergedProps);
    }
    return children;
  };
  const memoizedPopoverRoot = createMemo(() => {
    const PopoverContext2 = createPopoverContext(localProps.contextId);
    const InternalPopoverContext2 = createInternalPopoverContext(localProps.contextId);
    return untrack(() => createComponent(PopoverContext2.Provider, {
      value: {
        placement: () => localProps.placement,
        strategy: () => localProps.strategy,
        floatingOptions: () => localProps.floatingOptions,
        floatingState
      },
      get children() {
        return createComponent(InternalPopoverContext2.Provider, {
          value: {
            placement: () => localProps.placement,
            strategy: () => localProps.strategy,
            floatingOptions: () => localProps.floatingOptions,
            floatingState,
            setAnchorRef,
            setTriggerRef,
            setArrowRef
          },
          get children() {
            return createComponent(Dialog6, mergeProps({
              get contextId() {
                return localProps.contextId;
              }
            }, otherProps, {
              children: (dialogChildrenProps) => resolveChildren(dialogChildrenProps)
            }));
          }
        });
      }
    }));
  });
  return memoizedPopoverRoot;
};
var Root_default = PopoverRoot;
var PopoverTrigger = (props) => {
  const [localProps, otherProps] = splitProps(props, ["ref", "contextId"]);
  const dialogContext = createMemo(() => Dialog6.useContext(localProps.contextId));
  const context = createMemo(() => useInternalPopoverContext(localProps.contextId));
  return createComponent(Dialog6.Trigger, mergeProps({
    get contextId() {
      return localProps.contextId;
    },
    ref(r$) {
      var _ref$ = mergeRefs(context().setTriggerRef, localProps.ref);
      typeof _ref$ === "function" && _ref$(r$);
    },
    get ["data-placement"]() {
      return memo(() => !!dialogContext().open())() ? context().floatingState().placement : void 0;
    },
    "data-corvu-popover-trigger": "",
    "data-corvu-dialog-trigger": null
  }, otherProps));
};
var Trigger_default = PopoverTrigger;

// src/index.ts
var Popover = Object.assign(Root_default, {
  Anchor: Anchor_default,
  Trigger: Trigger_default,
  Portal,
  Overlay: Overlay_default,
  Content: Content_default,
  Arrow: Arrow_default,
  Label: Label_default,
  Description: Description_default,
  Close: Close_default,
  useContext: usePopoverContext,
  useDialogContext: useContext
});
var src_default = Popover;

export { Anchor_default as Anchor, Arrow_default as Arrow, Close_default as Close, Content_default as Content, Description_default as Description, Label_default as Label, Overlay_default as Overlay, Root_default as Root, Trigger_default as Trigger, src_default as default, usePopoverContext as useContext };
