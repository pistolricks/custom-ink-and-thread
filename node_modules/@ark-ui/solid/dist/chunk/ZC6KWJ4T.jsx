import {
  createSplitProps
} from "./6WEDGJKQ.jsx";
import {
  ark
} from "./UFYZ7HLU.jsx";
import {
  useEnvironmentContext
} from "./5O4RWSWO.jsx";
import {
  useLocaleContext
} from "./3QQZKR3F.jsx";
import {
  createContext
} from "./NMGUCD2L.jsx";
import {
  __export
} from "./7IUG3E2V.jsx";

// src/components/splitter/use-splitter-context.ts
var [SplitterProvider, useSplitterContext] = createContext({
  hookName: "useSplitterContext",
  providerName: "<SplitterProvider />"
});

// src/components/splitter/splitter-context.tsx
var SplitterContext = (props) => props.children(useSplitterContext());

// src/components/splitter/splitter-panel.tsx
import { mergeProps } from "@zag-js/solid";
var SplitterPanel = (props) => {
  const [panelProps, restProps] = createSplitProps()(props, ["id", "snapSize"]);
  const api = useSplitterContext();
  const mergedProps = mergeProps(() => api().getPanelProps(panelProps), restProps);
  return <ark.div {...mergedProps} />;
};

// src/components/splitter/splitter-resize-trigger.tsx
import { mergeProps as mergeProps2 } from "@zag-js/solid";
var SplitterResizeTrigger = (props) => {
  const [resizeTriggerProps, restProps] = createSplitProps()(props, [
    "disabled",
    "id",
    "step"
  ]);
  const api = useSplitterContext();
  const mergedProps = mergeProps2(() => api().getResizeTriggerProps(resizeTriggerProps), restProps);
  return <ark.button {...mergedProps} />;
};

// src/components/splitter/splitter-root.tsx
import { mergeProps as mergeProps3 } from "@zag-js/solid";

// src/components/splitter/use-splitter.ts
import { normalizeProps, useMachine } from "@zag-js/solid";
import * as splitter from "@zag-js/splitter";
import { createMemo, createUniqueId } from "solid-js";
var useSplitter = (props = {}) => {
  const locale = useLocaleContext();
  const environment = useEnvironmentContext();
  const id = createUniqueId();
  const context = createMemo(() => ({
    id,
    dir: locale().dir,
    getRootNode: environment().getRootNode,
    size: props.defaultSize,
    ...props
  }));
  const [state, send] = useMachine(splitter.machine(context()), { context });
  return createMemo(() => splitter.connect(state, send, normalizeProps));
};

// src/components/splitter/splitter-root.tsx
var SplitterRoot = (props) => {
  const [useSplitterProps, localProps] = createSplitProps()(props, [
    "defaultSize",
    "id",
    "ids",
    "onSizeChange",
    "onSizeChangeEnd",
    "orientation",
    "size"
  ]);
  const api = useSplitter(useSplitterProps);
  const mergedProps = mergeProps3(() => api().getRootProps(), localProps);
  return <SplitterProvider value={api}>
      <ark.div {...mergedProps} />
    </SplitterProvider>;
};

// src/components/splitter/splitter-root-provider.tsx
import { mergeProps as mergeProps4 } from "@zag-js/solid";
var SplitterRootProvider = (props) => {
  const [{ value: splitter2 }, localProps] = createSplitProps()(props, ["value"]);
  const mergedProps = mergeProps4(() => splitter2().getRootProps(), localProps);
  return <SplitterProvider value={splitter2}>
      <ark.div {...mergedProps} />
    </SplitterProvider>;
};

// src/components/splitter/splitter.anatomy.ts
import { anatomy } from "@zag-js/splitter";

// src/components/splitter/splitter.ts
var splitter_exports = {};
__export(splitter_exports, {
  Context: () => SplitterContext,
  Panel: () => SplitterPanel,
  ResizeTrigger: () => SplitterResizeTrigger,
  Root: () => SplitterRoot,
  RootProvider: () => SplitterRootProvider
});

export {
  useSplitterContext,
  SplitterContext,
  SplitterPanel,
  SplitterResizeTrigger,
  useSplitter,
  SplitterRoot,
  SplitterRootProvider,
  anatomy,
  splitter_exports
};
