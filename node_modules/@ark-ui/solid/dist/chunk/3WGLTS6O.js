import { useFieldContext } from './X3BMEEJH.js';
import { createSplitProps } from './ZMHI4GDJ.js';
import { ark } from './EPLBB4QN.js';
import { useEnvironmentContext } from './QODB3C3M.js';
import { useLocaleContext } from './HPDOBQ3V.js';
import { createContext } from './I5UG2QUO.js';
import { __export } from './ESLJRKWD.js';
import { createComponent, mergeProps as mergeProps$1 } from 'solid-js/web';
import { mergeProps, useMachine, normalizeProps } from '@zag-js/solid';
import * as numberInput from '@zag-js/number-input';
export { anatomy } from '@zag-js/number-input';
import { createUniqueId, createMemo } from 'solid-js';

// src/components/number-input/use-number-input-context.ts
var [NumberInputProvider, useNumberInputContext] = createContext({
  hookName: "useNumberInputContext",
  providerName: "<NumberInputProvider />"
});

// src/components/number-input/number-input-context.tsx
var NumberInputContext = (props) => props.children(useNumberInputContext());
var NumberInputControl = (props) => {
  const api = useNumberInputContext();
  const mergedProps = mergeProps(() => api().getControlProps(), props);
  return createComponent(ark.div, mergedProps);
};
var NumberInputDecrementTrigger = (props) => {
  const api = useNumberInputContext();
  const mergedProps = mergeProps(() => api().getDecrementTriggerProps(), props);
  return createComponent(ark.button, mergedProps);
};
var NumberInputIncrementTrigger = (props) => {
  const api = useNumberInputContext();
  const mergedProps = mergeProps(() => api().getIncrementTriggerProps(), props);
  return createComponent(ark.button, mergedProps);
};
var NumberInputInput = (props) => {
  const api = useNumberInputContext();
  const mergedProps = mergeProps(() => api().getInputProps(), props);
  const field = useFieldContext();
  return createComponent(ark.input, mergeProps$1({
    get ["aria-describedby"]() {
      return field?.().ariaDescribedby;
    }
  }, mergedProps));
};
var NumberInputLabel = (props) => {
  const api = useNumberInputContext();
  const mergedProps = mergeProps(() => api().getLabelProps(), props);
  return createComponent(ark.label, mergedProps);
};
var useNumberInput = (props = {}) => {
  const id = createUniqueId();
  const locale = useLocaleContext();
  const environment = useEnvironmentContext();
  const field = useFieldContext();
  const context = createMemo(() => ({
    id,
    ids: {
      label: field?.().ids.label,
      input: field?.().ids.control
    },
    disabled: field?.().disabled,
    readOnly: field?.().readOnly,
    required: field?.().required,
    invalid: field?.().invalid,
    dir: locale().dir,
    locale: locale().locale,
    getRootNode: environment().getRootNode,
    value: props.defaultValue,
    ...props
  }));
  const [state, send] = useMachine(numberInput.machine(context()), { context });
  return createMemo(() => numberInput.connect(state, send, normalizeProps));
};

// src/components/number-input/number-input-root.tsx
var NumberInputRoot = (props) => {
  const [useNumberInputProps, localProps] = createSplitProps()(props, ["allowMouseWheel", "allowOverflow", "clampValueOnBlur", "defaultValue", "disabled", "focusInputOnChange", "form", "formatOptions", "id", "ids", "inputMode", "invalid", "locale", "max", "min", "name", "onFocusChange", "onValueChange", "onValueInvalid", "pattern", "readOnly", "required", "spinOnPress", "step", "translations", "value"]);
  const api = useNumberInput(useNumberInputProps);
  const mergedProps = mergeProps(() => api().getRootProps(), localProps);
  return createComponent(NumberInputProvider, {
    value: api,
    get children() {
      return createComponent(ark.div, mergedProps);
    }
  });
};
var NumberInputRootProvider = (props) => {
  const [{
    value: numberInput2
  }, localProps] = createSplitProps()(props, ["value"]);
  const mergedProps = mergeProps(() => numberInput2().getRootProps(), localProps);
  return createComponent(NumberInputProvider, {
    value: numberInput2,
    get children() {
      return createComponent(ark.div, mergedProps);
    }
  });
};
var NumberInputScrubber = (props) => {
  const api = useNumberInputContext();
  const mergedProps = mergeProps(() => api().getScrubberProps(), props);
  return createComponent(ark.div, mergedProps);
};
var NumberInputValueText = (props) => {
  const numberInput2 = useNumberInputContext();
  const mergedProps = mergeProps(() => numberInput2().getValueTextProps(), props);
  return createComponent(ark.span, mergedProps);
};

// src/components/number-input/number-input.ts
var number_input_exports = {};
__export(number_input_exports, {
  Context: () => NumberInputContext,
  Control: () => NumberInputControl,
  DecrementTrigger: () => NumberInputDecrementTrigger,
  IncrementTrigger: () => NumberInputIncrementTrigger,
  Input: () => NumberInputInput,
  Label: () => NumberInputLabel,
  Root: () => NumberInputRoot,
  RootProvider: () => NumberInputRootProvider,
  Scrubber: () => NumberInputScrubber,
  ValueText: () => NumberInputValueText
});

export { NumberInputContext, NumberInputControl, NumberInputDecrementTrigger, NumberInputIncrementTrigger, NumberInputInput, NumberInputLabel, NumberInputRoot, NumberInputRootProvider, NumberInputScrubber, NumberInputValueText, number_input_exports, useNumberInput, useNumberInputContext };
