import { usePresenceContext, splitPresenceProps, usePresence, PresenceProvider } from './LCESUDZB.js';
import { createSplitProps } from './ZMHI4GDJ.js';
import { ark } from './EPLBB4QN.js';
import { useEnvironmentContext } from './QODB3C3M.js';
import { useLocaleContext } from './HPDOBQ3V.js';
import { createContext } from './I5UG2QUO.js';
import { __export } from './ESLJRKWD.js';
import { createComponent } from 'solid-js/web';
import { mergeProps, useMachine, normalizeProps } from '@zag-js/solid';
import { Show, createUniqueId, createMemo } from 'solid-js';
import * as hoverCard from '@zag-js/hover-card';
export { anatomy } from '@zag-js/hover-card';

// src/components/hover-card/use-hover-card-context.ts
var [HoverCardProvider, useHoverCardContext] = createContext({
  hookName: "useHoverCardContext",
  providerName: "<HoverCardProvider />"
});

// src/components/hover-card/hover-card-arrow.tsx
var HoverCardArrow = (props) => {
  const hoverCard2 = useHoverCardContext();
  const mergedProps = mergeProps(() => hoverCard2().getArrowProps(), props);
  return createComponent(ark.div, mergedProps);
};
var HoverCardArrowTip = (props) => {
  const hoverCard2 = useHoverCardContext();
  const mergedProps = mergeProps(() => hoverCard2().getArrowTipProps(), props);
  return createComponent(ark.div, mergedProps);
};
var HoverCardContent = (props) => {
  const api = useHoverCardContext();
  const presenceApi = usePresenceContext();
  const mergedProps = mergeProps(() => api().getContentProps(), () => presenceApi().presenceProps, props);
  return createComponent(Show, {
    get when() {
      return !presenceApi().unmounted;
    },
    get children() {
      return createComponent(ark.div, mergedProps);
    }
  });
};

// src/components/hover-card/hover-card-context.tsx
var HoverCardContext = (props) => props.children(useHoverCardContext());
var HoverCardPositioner = (props) => {
  const api = useHoverCardContext();
  const presenceApi = usePresenceContext();
  const mergedProps = mergeProps(() => api().getPositionerProps(), props);
  return createComponent(Show, {
    get when() {
      return !presenceApi().unmounted;
    },
    get children() {
      return createComponent(ark.div, mergedProps);
    }
  });
};
var useHoverCard = (props = {}) => {
  const locale = useLocaleContext();
  const environment = useEnvironmentContext();
  const id = createUniqueId();
  const context = createMemo(() => ({
    id,
    dir: locale().dir,
    getRootNode: environment().getRootNode,
    open: props.defaultOpen,
    "open.controlled": props.open !== void 0,
    ...props
  }));
  const [state, send] = useMachine(hoverCard.machine(context()), { context });
  return createMemo(() => hoverCard.connect(state, send, normalizeProps));
};

// src/components/hover-card/hover-card-root.tsx
var HoverCardRoot = (props) => {
  const [presenceProps, hoverCardProps] = splitPresenceProps(props);
  const [useHoverCardProps, localProps] = createSplitProps()(hoverCardProps, ["closeDelay", "defaultOpen", "id", "ids", "onOpenChange", "open", "openDelay", "positioning"]);
  const api = useHoverCard(useHoverCardProps);
  const apiPresence = usePresence(mergeProps(presenceProps, () => ({
    present: api().open
  })));
  return createComponent(HoverCardProvider, {
    value: api,
    get children() {
      return createComponent(PresenceProvider, {
        value: apiPresence,
        get children() {
          return localProps.children;
        }
      });
    }
  });
};
var HoverCardRootProvider = (props) => {
  const [presenceProps, hoverCardProps] = splitPresenceProps(props);
  const presence = usePresence(mergeProps(presenceProps, () => ({
    present: hoverCardProps.value().open
  })));
  return createComponent(HoverCardProvider, {
    get value() {
      return hoverCardProps.value;
    },
    get children() {
      return createComponent(PresenceProvider, {
        value: presence,
        get children() {
          return hoverCardProps.children;
        }
      });
    }
  });
};
var HoverCardTrigger = (props) => {
  const hoverCard2 = useHoverCardContext();
  const mergedProps = mergeProps(() => hoverCard2().getTriggerProps(), props);
  return createComponent(ark.button, mergedProps);
};

// src/components/hover-card/hover-card.ts
var hover_card_exports = {};
__export(hover_card_exports, {
  Arrow: () => HoverCardArrow,
  ArrowTip: () => HoverCardArrowTip,
  Content: () => HoverCardContent,
  Context: () => HoverCardContext,
  Positioner: () => HoverCardPositioner,
  Root: () => HoverCardRoot,
  RootProvider: () => HoverCardRootProvider,
  Trigger: () => HoverCardTrigger
});

export { HoverCardArrow, HoverCardArrowTip, HoverCardContent, HoverCardContext, HoverCardPositioner, HoverCardRoot, HoverCardRootProvider, HoverCardTrigger, hover_card_exports, useHoverCard, useHoverCardContext };
