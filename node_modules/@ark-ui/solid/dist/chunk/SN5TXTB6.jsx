import {
  useControllableState
} from "./52WUF3CY.jsx";
import {
  createSplitProps
} from "./6WEDGJKQ.jsx";
import {
  ark
} from "./UFYZ7HLU.jsx";
import {
  createContext
} from "./NMGUCD2L.jsx";
import {
  __export
} from "./7IUG3E2V.jsx";

// src/components/toggle/toggle.ts
var toggle_exports = {};
__export(toggle_exports, {
  Context: () => ToggleContext,
  Indicator: () => ToggleIndicator,
  Root: () => ToggleRoot,
  toggleAnatomy: () => toggleAnatomy
});

// src/components/toggle/use-toggle-context.ts
var [ToggleProvider, useToggleContext] = createContext({
  hookName: "useToggleContext",
  providerName: "<ToggleProvider />"
});

// src/components/toggle/toggle-context.tsx
var ToggleContext = (props) => props.children(useToggleContext());

// src/components/toggle/toggle-indicator.tsx
import { mergeProps } from "@zag-js/solid";
import { Show } from "solid-js";
var ToggleIndicator = (props) => {
  const { children, fallback, ...restProps } = props;
  const toggle = useToggleContext();
  const mergedProps = mergeProps(() => toggle().getIndicatorProps(), restProps);
  return <ark.div {...mergedProps}>
      {
    /* @ts-ignore */
  }
      <Show when={toggle().pressed} fallback={fallback}>
        {children}
      </Show>
    </ark.div>;
};

// src/components/toggle/toggle-root.tsx
import { mergeProps as mergeProps2 } from "@zag-js/solid";

// src/components/toggle/use-toggle.ts
import { dataAttr } from "@zag-js/dom-query";
import { createMemo } from "solid-js";

// src/components/toggle/toggle.anatomy.ts
import { createAnatomy } from "@zag-js/anatomy";
var toggleAnatomy = createAnatomy("toggle", ["root", "indicator"]);
var parts = toggleAnatomy.build();

// src/components/toggle/use-toggle.ts
function useToggle(props) {
  const { defaultPressed, pressed, onPressedChange, disabled } = props;
  const [pressedState, setPressedState] = useControllableState({
    defaultValue: !!defaultPressed,
    value: pressed,
    onChange: onPressedChange
  });
  return createMemo(() => ({
    pressed: pressedState(),
    disabled: !!disabled,
    setPressed: setPressedState,
    getRootProps() {
      return {
        ...parts.root.attrs,
        type: "button",
        disabled,
        "aria-pressed": pressedState(),
        "data-state": pressedState() ? "on" : "off",
        "data-pressed": dataAttr(pressedState()),
        "data-disabled": dataAttr(disabled),
        onClick(event) {
          if (event.defaultPrevented) return;
          if (disabled) return;
          setPressedState(!pressedState());
        }
      };
    },
    getIndicatorProps() {
      return {
        ...parts.indicator.attrs,
        "data-disabled": dataAttr(disabled),
        "data-pressed": dataAttr(pressedState()),
        "data-state": pressedState() ? "on" : "off"
      };
    }
  }));
}

// src/components/toggle/toggle-root.tsx
var ToggleRoot = (props) => {
  const [useToggleProps, localProps] = createSplitProps()(props, [
    "pressed",
    "defaultPressed",
    "disabled",
    "onPressedChange"
  ]);
  const toggle = useToggle(useToggleProps);
  const mergedProps = mergeProps2(() => toggle().getRootProps(), localProps);
  return <ToggleProvider value={toggle}>
      <button {...mergedProps} />
    </ToggleProvider>;
};

export {
  useToggleContext,
  ToggleContext,
  ToggleIndicator,
  toggleAnatomy,
  useToggle,
  ToggleRoot,
  toggle_exports
};
