import { collapsible_exports } from './3HMZSTYX.js';
import { useRenderStrategyContext, splitRenderStrategyProps, RenderStrategyProvider } from './L7OSYHVR.js';
import { createSplitProps } from './ZMHI4GDJ.js';
import { ark } from './EPLBB4QN.js';
import { useEnvironmentContext } from './QODB3C3M.js';
import { useLocaleContext } from './HPDOBQ3V.js';
import { createContext } from './I5UG2QUO.js';
import { __export } from './ESLJRKWD.js';
import { createComponent, mergeProps as mergeProps$1 } from 'solid-js/web';
import { mergeProps, useMachine, normalizeProps } from '@zag-js/solid';
import { createMemo, createUniqueId } from 'solid-js';
import * as treeView from '@zag-js/tree-view';
export { anatomy } from '@zag-js/tree-view';

// src/components/tree-view/use-tree-view-context.ts
var [TreeViewProvider, useTreeViewContext] = createContext({
  hookName: "useTreeViewContext",
  providerName: "<TreeViewProvider />"
});

// src/components/tree-view/use-tree-view-node-props-context.ts
var [TreeViewNodePropsProvider, useTreeViewNodePropsContext] = createContext({
  hookName: "useTreeViewNodePropsContext",
  providerName: "<TreeViewNodeProvider />"
});

// src/components/tree-view/tree-view-branch.tsx
var TreeViewBranch = (props) => {
  const treeView2 = useTreeViewContext();
  const nodeProps = useTreeViewNodePropsContext();
  const renderStrategyProps = useRenderStrategyContext();
  const nodeState = createMemo(() => treeView2().getNodeState(nodeProps));
  const branchContentProps = treeView2().getBranchContentProps(nodeProps);
  const mergedProps = mergeProps(() => treeView2().getBranchProps(nodeProps), props);
  return createComponent(collapsible_exports.Root, mergeProps$1({
    get open() {
      return nodeState().expanded;
    },
    get ids() {
      return {
        content: branchContentProps.id
      };
    }
  }, renderStrategyProps, mergedProps));
};
var splitVisibilityProps = createSplitProps();
var TreeViewBranchContent = (props) => {
  const treeView2 = useTreeViewContext();
  const nodeProps = useTreeViewNodePropsContext();
  const branchContentProps = createMemo(() => {
    const contentProps = treeView2().getBranchContentProps(nodeProps);
    const [, ownProps] = splitVisibilityProps(contentProps, ["hidden", "data-state"]);
    return ownProps;
  });
  const mergedProps = mergeProps(() => branchContentProps(), props);
  return createComponent(collapsible_exports.Content, mergedProps);
};
var TreeViewBranchControl = (props) => {
  const treeView2 = useTreeViewContext();
  const nodeProps = useTreeViewNodePropsContext();
  const mergedProps = mergeProps(() => treeView2().getBranchControlProps(nodeProps), props);
  return createComponent(ark.div, mergedProps);
};
var TreeViewBranchIndentGuide = (props) => {
  const treeView2 = useTreeViewContext();
  const nodeProps = useTreeViewNodePropsContext();
  const mergedProps = mergeProps(() => treeView2().getBranchIndentGuideProps(nodeProps), props);
  return createComponent(ark.div, mergedProps);
};
var TreeViewBranchIndicator = (props) => {
  const treeView2 = useTreeViewContext();
  const nodeProps = useTreeViewNodePropsContext();
  const mergedProps = mergeProps(() => treeView2().getBranchIndicatorProps(nodeProps), props);
  return createComponent(ark.div, mergedProps);
};
var TreeViewBranchText = (props) => {
  const treeView2 = useTreeViewContext();
  const nodeProps = useTreeViewNodePropsContext();
  const mergedProps = mergeProps(() => treeView2().getBranchTextProps(nodeProps), props);
  return createComponent(ark.span, mergedProps);
};
var TreeViewBranchTrigger = (props) => {
  const treeView2 = useTreeViewContext();
  const nodeProps = useTreeViewNodePropsContext();
  const mergedProps = mergeProps(() => treeView2().getBranchTriggerProps(nodeProps), props);
  return createComponent(ark.div, mergedProps);
};

// src/components/tree-view/tree-view-context.tsx
var TreeViewContext = (props) => props.children(useTreeViewContext());
var TreeViewItem = (props) => {
  const treeView2 = useTreeViewContext();
  const nodeProps = useTreeViewNodePropsContext();
  const mergedProps = mergeProps(() => treeView2().getItemProps(nodeProps), props);
  return createComponent(ark.div, mergedProps);
};
var TreeViewItemIndicator = (props) => {
  const treeView2 = useTreeViewContext();
  const nodeProps = useTreeViewNodePropsContext();
  const mergedProps = mergeProps(() => treeView2().getItemIndicatorProps(nodeProps), props);
  return createComponent(ark.div, mergedProps);
};
var TreeViewItemText = (props) => {
  const treeView2 = useTreeViewContext();
  const nodeProps = useTreeViewNodePropsContext();
  const mergedProps = mergeProps(() => treeView2().getItemTextProps(nodeProps), props);
  return createComponent(ark.span, mergedProps);
};
var TreeViewLabel = (props) => {
  const treeView2 = useTreeViewContext();
  const mergedProps = mergeProps(() => treeView2().getLabelProps(), props);
  return createComponent(ark.label, mergedProps);
};

// src/components/tree-view/use-tree-view-node-context.ts
var [TreeViewNodeProvider, useTreeViewNodeContext] = createContext(
  {
    hookName: "useTreeViewNodeContext",
    providerName: "<TreeViewNodeProvider />"
  }
);

// src/components/tree-view/tree-view-node-context.ts
var TreeViewNodeContext = (props) => props.children(useTreeViewNodeContext());
function TreeViewNodeProvider2(props) {
  const [nodeProps, localProps] = createSplitProps()(props, ["indexPath", "node"]);
  return createComponent(TreeViewNodePropsProvider, {
    value: nodeProps,
    get children() {
      return localProps.children;
    }
  });
}
var useTreeView = (props) => {
  const locale = useLocaleContext();
  const environment = useEnvironmentContext();
  const id = createUniqueId();
  const context = createMemo(() => ({
    id,
    dir: locale().dir,
    getRootNode: environment().getRootNode,
    selectedValue: props.defaultSelectedValue,
    expandedValue: props.defaultExpandedValue,
    ...props
  }));
  const [state, send] = useMachine(treeView.machine(context()), { context });
  return createMemo(() => treeView.connect(state, send, normalizeProps));
};

// src/components/tree-view/tree-view-root.tsx
var TreeViewRoot = (props) => {
  const [renderStrategyProps, treeViewProps] = splitRenderStrategyProps(props);
  const [useTreeViewProps, localProps] = createSplitProps()(treeViewProps, ["collection", "defaultExpandedValue", "defaultSelectedValue", "expandedValue", "expandOnClick", "focusedValue", "id", "ids", "onExpandedChange", "onFocusChange", "onSelectionChange", "selectedValue", "selectionMode", "typeahead"]);
  const treeView2 = useTreeView(useTreeViewProps);
  const mergedProps = mergeProps(() => treeView2().getRootProps(), localProps);
  return createComponent(TreeViewProvider, {
    value: treeView2,
    get children() {
      return createComponent(RenderStrategyProvider, {
        value: renderStrategyProps,
        get children() {
          return createComponent(ark.div, mergedProps);
        }
      });
    }
  });
};
var TreeViewRootProvider = (props) => {
  const [renderStrategyProps, treeViewProps] = splitRenderStrategyProps(props);
  const [{
    value: treeView2
  }, localProps] = createSplitProps()(treeViewProps, ["value"]);
  const mergedProps = mergeProps(() => treeView2().getRootProps(), localProps);
  return createComponent(TreeViewProvider, {
    value: treeView2,
    get children() {
      return createComponent(RenderStrategyProvider, {
        value: renderStrategyProps,
        get children() {
          return createComponent(ark.div, mergedProps);
        }
      });
    }
  });
};
var TreeViewTree = (props) => {
  const treeView2 = useTreeViewContext();
  const mergedProps = mergeProps(() => treeView2().getTreeProps(), props);
  return createComponent(ark.div, mergedProps);
};

// src/components/tree-view/tree-view.ts
var tree_view_exports = {};
__export(tree_view_exports, {
  Branch: () => TreeViewBranch,
  BranchContent: () => TreeViewBranchContent,
  BranchControl: () => TreeViewBranchControl,
  BranchIndentGuide: () => TreeViewBranchIndentGuide,
  BranchIndicator: () => TreeViewBranchIndicator,
  BranchText: () => TreeViewBranchText,
  BranchTrigger: () => TreeViewBranchTrigger,
  Context: () => TreeViewContext,
  Item: () => TreeViewItem,
  ItemIndicator: () => TreeViewItemIndicator,
  ItemText: () => TreeViewItemText,
  Label: () => TreeViewLabel,
  NodeContext: () => TreeViewNodeContext,
  NodeProvider: () => TreeViewNodeProvider2,
  Root: () => TreeViewRoot,
  RootProvider: () => TreeViewRootProvider,
  Tree: () => TreeViewTree
});

export { TreeViewBranch, TreeViewBranchContent, TreeViewBranchControl, TreeViewBranchIndentGuide, TreeViewBranchIndicator, TreeViewBranchText, TreeViewBranchTrigger, TreeViewContext, TreeViewItem, TreeViewItemIndicator, TreeViewItemText, TreeViewLabel, TreeViewNodeContext, TreeViewNodeProvider2 as TreeViewNodeProvider, TreeViewRoot, TreeViewRootProvider, TreeViewTree, tree_view_exports, useTreeView };
