import { useControllableState } from './BSPFGETO.js';
import { createSplitProps } from './ZMHI4GDJ.js';
import { ark } from './EPLBB4QN.js';
import { createContext } from './I5UG2QUO.js';
import { __export } from './ESLJRKWD.js';
import { createComponent, mergeProps as mergeProps$1, spread, template } from 'solid-js/web';
import { mergeProps } from '@zag-js/solid';
import { Show, createMemo } from 'solid-js';
import { dataAttr } from '@zag-js/dom-query';
import { createAnatomy } from '@zag-js/anatomy';

// src/components/toggle/toggle.ts
var toggle_exports = {};
__export(toggle_exports, {
  Context: () => ToggleContext,
  Indicator: () => ToggleIndicator,
  Root: () => ToggleRoot,
  toggleAnatomy: () => toggleAnatomy
});

// src/components/toggle/use-toggle-context.ts
var [ToggleProvider, useToggleContext] = createContext({
  hookName: "useToggleContext",
  providerName: "<ToggleProvider />"
});

// src/components/toggle/toggle-context.tsx
var ToggleContext = (props) => props.children(useToggleContext());
var ToggleIndicator = (props) => {
  const {
    children,
    fallback,
    ...restProps
  } = props;
  const toggle = useToggleContext();
  const mergedProps = mergeProps(() => toggle().getIndicatorProps(), restProps);
  return createComponent(ark.div, mergeProps$1(mergedProps, {
    get children() {
      return createComponent(Show, {
        get when() {
          return toggle().pressed;
        },
        fallback,
        children
      });
    }
  }));
};
var toggleAnatomy = createAnatomy("toggle", ["root", "indicator"]);
var parts = toggleAnatomy.build();

// src/components/toggle/use-toggle.ts
function useToggle(props) {
  const { defaultPressed, pressed, onPressedChange, disabled } = props;
  const [pressedState, setPressedState] = useControllableState({
    defaultValue: !!defaultPressed,
    value: pressed,
    onChange: onPressedChange
  });
  return createMemo(() => ({
    pressed: pressedState(),
    disabled: !!disabled,
    setPressed: setPressedState,
    getRootProps() {
      return {
        ...parts.root.attrs,
        type: "button",
        disabled,
        "aria-pressed": pressedState(),
        "data-state": pressedState() ? "on" : "off",
        "data-pressed": dataAttr(pressedState()),
        "data-disabled": dataAttr(disabled),
        onClick(event) {
          if (event.defaultPrevented) return;
          if (disabled) return;
          setPressedState(!pressedState());
        }
      };
    },
    getIndicatorProps() {
      return {
        ...parts.indicator.attrs,
        "data-disabled": dataAttr(disabled),
        "data-pressed": dataAttr(pressedState()),
        "data-state": pressedState() ? "on" : "off"
      };
    }
  }));
}

// src/components/toggle/toggle-root.tsx
var _tmpl$ = /* @__PURE__ */ template(`<button>`);
var ToggleRoot = (props) => {
  const [useToggleProps, localProps] = createSplitProps()(props, ["pressed", "defaultPressed", "disabled", "onPressedChange"]);
  const toggle = useToggle(useToggleProps);
  const mergedProps = mergeProps(() => toggle().getRootProps(), localProps);
  return createComponent(ToggleProvider, {
    value: toggle,
    get children() {
      var _el$ = _tmpl$();
      spread(_el$, mergedProps, false, false);
      return _el$;
    }
  });
};

export { ToggleContext, ToggleIndicator, ToggleRoot, toggleAnatomy, toggle_exports, useToggle, useToggleContext };
