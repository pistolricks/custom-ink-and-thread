import { useFieldContext } from './X3BMEEJH.js';
import { createSplitProps } from './ZMHI4GDJ.js';
import { ark } from './EPLBB4QN.js';
import { useEnvironmentContext } from './QODB3C3M.js';
import { useLocaleContext } from './HPDOBQ3V.js';
import { createContext } from './I5UG2QUO.js';
import { __export } from './ESLJRKWD.js';
import { createComponent, mergeProps as mergeProps$1 } from 'solid-js/web';
import { mergeProps, useMachine, normalizeProps } from '@zag-js/solid';
import * as zagSwitch from '@zag-js/switch';
export { anatomy } from '@zag-js/switch';
import { createUniqueId, createMemo } from 'solid-js';

// src/components/switch/use-switch-context.ts
var [SwitchProvider, useSwitchContext] = createContext({
  hookName: "useSwitchContext",
  providerName: "<SwitchProvider />"
});

// src/components/switch/switch-context.tsx
var SwitchContext = (props) => props.children(useSwitchContext());
var SwitchControl = (props) => {
  const api = useSwitchContext();
  const mergedProps = mergeProps(() => api().getControlProps(), props);
  return createComponent(ark.span, mergedProps);
};
var SwitchHiddenInput = (props) => {
  const api = useSwitchContext();
  const mergedProps = mergeProps(() => api().getHiddenInputProps(), props);
  const field = useFieldContext();
  return createComponent(ark.input, mergeProps$1({
    get ["aria-describedby"]() {
      return field?.().ariaDescribedby;
    }
  }, mergedProps));
};
var SwitchLabel = (props) => {
  const api = useSwitchContext();
  const mergedProps = mergeProps(() => api().getLabelProps(), props);
  return createComponent(ark.span, mergedProps);
};
var useSwitch = (props = {}) => {
  const locale = useLocaleContext();
  const environment = useEnvironmentContext();
  const id = createUniqueId();
  const field = useFieldContext();
  const context = createMemo(() => ({
    id,
    ids: {
      label: field?.().ids.label,
      hiddenInput: field?.().ids.control
    },
    disabled: field?.().disabled,
    readOnly: field?.().readOnly,
    invalid: field?.().invalid,
    required: field?.().required,
    dir: locale().dir,
    getRootNode: environment().getRootNode,
    checked: props.defaultChecked,
    ...props
  }));
  const [state, send] = useMachine(zagSwitch.machine(context()), { context });
  return createMemo(() => zagSwitch.connect(state, send, normalizeProps));
};

// src/components/switch/switch-root.tsx
var SwitchRoot = (props) => {
  const [switchProps, localProps] = createSplitProps()(props, ["checked", "defaultChecked", "disabled", "form", "id", "ids", "invalid", "label", "name", "onCheckedChange", "readOnly", "required", "value"]);
  const api = useSwitch(switchProps);
  const mergedProps = mergeProps(() => api().getRootProps(), localProps);
  return createComponent(SwitchProvider, {
    value: api,
    get children() {
      return createComponent(ark.label, mergedProps);
    }
  });
};
var SwitchRootProvider = (props) => {
  const [{
    value: api
  }, localProps] = createSplitProps()(props, ["value"]);
  const mergedProps = mergeProps(() => api().getRootProps(), localProps);
  return createComponent(SwitchProvider, {
    value: api,
    get children() {
      return createComponent(ark.label, mergedProps);
    }
  });
};
var SwitchThumb = (props) => {
  const api = useSwitchContext();
  const mergedProps = mergeProps(() => api().getThumbProps(), props);
  return createComponent(ark.span, mergedProps);
};

// src/components/switch/switch.ts
var switch_exports = {};
__export(switch_exports, {
  Context: () => SwitchContext,
  Control: () => SwitchControl,
  HiddenInput: () => SwitchHiddenInput,
  Label: () => SwitchLabel,
  Root: () => SwitchRoot,
  RootProvider: () => SwitchRootProvider,
  Thumb: () => SwitchThumb
});

export { SwitchContext, SwitchControl, SwitchHiddenInput, SwitchLabel, SwitchRoot, SwitchRootProvider, SwitchThumb, switch_exports, useSwitch, useSwitchContext };
