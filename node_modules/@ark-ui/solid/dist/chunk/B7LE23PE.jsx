import {
  splitRenderStrategyProps
} from "./5ONYCKM3.jsx";
import {
  createSplitProps
} from "./6WEDGJKQ.jsx";
import {
  ark
} from "./UFYZ7HLU.jsx";
import {
  useEnvironmentContext
} from "./5O4RWSWO.jsx";
import {
  useLocaleContext
} from "./3QQZKR3F.jsx";
import {
  createContext
} from "./NMGUCD2L.jsx";
import {
  __export
} from "./7IUG3E2V.jsx";

// src/components/collapsible/collapsible-content.tsx
import { mergeProps } from "@zag-js/solid";
import { Show } from "solid-js";

// src/components/collapsible/use-collapsible-context.ts
var [CollapsibleProvider, useCollapsibleContext] = createContext({
  hookName: "useCollapsibleContext",
  providerName: "<CollapsibleProvider />"
});

// src/components/collapsible/collapsible-content.tsx
var CollapsibleContent = (props) => {
  const api = useCollapsibleContext();
  const mergedProps = mergeProps(() => api().getContentProps(), props);
  return <Show when={!api().unmounted}>
      <ark.div {...mergedProps} />
    </Show>;
};

// src/components/collapsible/collapsible-context.tsx
var CollapsibleContext = (props) => props.children(useCollapsibleContext());

// src/components/collapsible/collapsible-root.tsx
import { mergeProps as mergeProps2 } from "@zag-js/solid";

// src/components/collapsible/use-collapsible.ts
import * as collapsible from "@zag-js/collapsible";
import { normalizeProps, useMachine } from "@zag-js/solid";
import { createEffect, createMemo, createSignal, createUniqueId } from "solid-js";
var useCollapsible = (props = {}) => {
  const locale = useLocaleContext();
  const environment = useEnvironmentContext();
  const [renderStrategyProps, collapsibleProps] = splitRenderStrategyProps(props);
  const id = createUniqueId();
  const context = createMemo(() => ({
    id,
    dir: locale().dir,
    getRootNode: environment().getRootNode,
    open: props.defaultOpen,
    "open.controlled": props.open !== void 0,
    ...collapsibleProps
  }));
  const [state, send] = useMachine(collapsible.machine(context()), { context });
  const [wasVisible, setWasVisible] = createSignal(false);
  createEffect(() => {
    const isPresent = api().visible;
    if (isPresent) setWasVisible(true);
  });
  const api = createMemo(() => collapsible.connect(state, send, normalizeProps));
  return createMemo(() => ({
    ...api(),
    unmounted: !api().visible && !wasVisible() && renderStrategyProps.lazyMount || renderStrategyProps.unmountOnExit && !api().visible && wasVisible()
  }));
};

// src/components/collapsible/collapsible-root.tsx
var CollapsibleRoot = (props) => {
  const [useCollapsibleProps, localProps] = createSplitProps()(props, [
    "defaultOpen",
    "disabled",
    "id",
    "ids",
    "lazyMount",
    "onExitComplete",
    "onOpenChange",
    "open",
    "unmountOnExit"
  ]);
  const api = useCollapsible(useCollapsibleProps);
  const mergedProps = mergeProps2(() => api().getRootProps(), localProps);
  return <CollapsibleProvider value={api}>
      <ark.div {...mergedProps} />
    </CollapsibleProvider>;
};

// src/components/collapsible/collapsible-root-provider.tsx
import { mergeProps as mergeProps3 } from "@zag-js/solid";
var CollapsibleRootProvider = (props) => {
  const [{ value: collapsible2 }, localProps] = createSplitProps()(props, [
    "value"
  ]);
  const mergedProps = mergeProps3(() => collapsible2().getRootProps(), localProps);
  return <CollapsibleProvider value={collapsible2}>
      <ark.div {...mergedProps} />
    </CollapsibleProvider>;
};

// src/components/collapsible/collapsible-trigger.tsx
import { mergeProps as mergeProps4 } from "@zag-js/solid";
var CollapsibleTrigger = (props) => {
  const api = useCollapsibleContext();
  const mergedProps = mergeProps4(() => api().getTriggerProps(), props);
  return <ark.button {...mergedProps} />;
};

// src/components/collapsible/collapsible.anatomy.ts
import { anatomy } from "@zag-js/collapsible";

// src/components/collapsible/collapsible.ts
var collapsible_exports = {};
__export(collapsible_exports, {
  Content: () => CollapsibleContent,
  Context: () => CollapsibleContext,
  Root: () => CollapsibleRoot,
  RootProvider: () => CollapsibleRootProvider,
  Trigger: () => CollapsibleTrigger
});

export {
  useCollapsibleContext,
  CollapsibleContent,
  CollapsibleContext,
  useCollapsible,
  CollapsibleRoot,
  CollapsibleRootProvider,
  CollapsibleTrigger,
  anatomy,
  collapsible_exports
};
