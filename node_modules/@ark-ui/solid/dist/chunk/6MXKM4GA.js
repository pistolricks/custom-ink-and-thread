import { useFieldContext } from './X3BMEEJH.js';
import { createSplitProps } from './ZMHI4GDJ.js';
import { ark } from './EPLBB4QN.js';
import { useEnvironmentContext } from './QODB3C3M.js';
import { useLocaleContext } from './HPDOBQ3V.js';
import { createContext } from './I5UG2QUO.js';
import { __export } from './ESLJRKWD.js';
import { createComponent, mergeProps as mergeProps$1 } from 'solid-js/web';
import { mergeProps, useMachine, normalizeProps } from '@zag-js/solid';
import * as pinInput from '@zag-js/pin-input';
export { anatomy } from '@zag-js/pin-input';
import { createUniqueId, createMemo } from 'solid-js';

// src/components/pin-input/use-pin-input-context.ts
var [PinInputProvider, usePinInputContext] = createContext({
  hookName: "usePinInputContext",
  providerName: "<PinInputProvider />"
});

// src/components/pin-input/pin-input-context.tsx
var PinInputContext = (props) => props.children(usePinInputContext());
var PinInputControl = (props) => {
  const api = usePinInputContext();
  const mergedProps = mergeProps(() => api().getControlProps(), props);
  return createComponent(ark.div, mergedProps);
};
var PinInputHiddenInput = (props) => {
  const pinInput2 = usePinInputContext();
  const mergedProps = mergeProps(() => pinInput2().getHiddenInputProps(), props);
  const field = useFieldContext();
  return createComponent(ark.input, mergeProps$1({
    get ["aria-describedby"]() {
      return field?.().ariaDescribedby;
    }
  }, mergedProps));
};
var PinInputInput = (props) => {
  const [inputProps, localProps] = createSplitProps()(props, ["index"]);
  const api = usePinInputContext();
  const mergedProps = mergeProps(() => api().getInputProps(inputProps), localProps);
  return createComponent(ark.input, mergedProps);
};
var PinInputLabel = (props) => {
  const api = usePinInputContext();
  const mergedProps = mergeProps(() => api().getLabelProps(), props);
  return createComponent(ark.label, mergedProps);
};
var usePinInput = (props = {}) => {
  const locale = useLocaleContext();
  const environment = useEnvironmentContext();
  const id = createUniqueId();
  const field = useFieldContext();
  const context = createMemo(() => ({
    id,
    ids: {
      label: field?.().ids.label,
      hiddenInput: field?.().ids.control
    },
    disabled: field?.().disabled,
    readOnly: field?.().readOnly,
    required: field?.().required,
    invalid: field?.().invalid,
    dir: locale().dir,
    getRootNode: environment().getRootNode,
    value: props.defaultValue,
    ...props
  }));
  const [state, send] = useMachine(pinInput.machine(context()), { context });
  return createMemo(() => pinInput.connect(state, send, normalizeProps));
};

// src/components/pin-input/pin-input-root.tsx
var PinInputRoot = (props) => {
  const [usePinInputProps, localProps] = createSplitProps()(props, ["autoFocus", "blurOnComplete", "defaultValue", "disabled", "form", "id", "ids", "invalid", "mask", "name", "onValueChange", "onValueComplete", "onValueInvalid", "otp", "pattern", "placeholder", "readOnly", "required", "selectOnFocus", "translations", "type", "value"]);
  const pinInput2 = usePinInput(usePinInputProps);
  const mergedProps = mergeProps(() => pinInput2().getRootProps(), localProps);
  return createComponent(PinInputProvider, {
    value: pinInput2,
    get children() {
      return createComponent(ark.div, mergedProps);
    }
  });
};
var PinInputRootProvider = (props) => {
  const [{
    value: pinInput2
  }, localProps] = createSplitProps()(props, ["value"]);
  const mergedProps = mergeProps(() => pinInput2().getRootProps(), localProps);
  return createComponent(PinInputProvider, {
    value: pinInput2,
    get children() {
      return createComponent(ark.div, mergedProps);
    }
  });
};

// src/components/pin-input/pin-input.ts
var pin_input_exports = {};
__export(pin_input_exports, {
  Context: () => PinInputContext,
  Control: () => PinInputControl,
  HiddenInput: () => PinInputHiddenInput,
  Input: () => PinInputInput,
  Label: () => PinInputLabel,
  Root: () => PinInputRoot,
  RootProvider: () => PinInputRootProvider
});

export { PinInputContext, PinInputControl, PinInputHiddenInput, PinInputInput, PinInputLabel, PinInputRoot, PinInputRootProvider, pin_input_exports, usePinInput, usePinInputContext };
