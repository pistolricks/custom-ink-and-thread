import {
  splitRenderStrategyProps
} from "./5ONYCKM3.jsx";
import {
  createSplitProps
} from "./6WEDGJKQ.jsx";
import {
  ark
} from "./UFYZ7HLU.jsx";
import {
  createContext
} from "./NMGUCD2L.jsx";

// src/components/presence/presence.tsx
import { mergeProps } from "@zag-js/solid";
import { Show } from "solid-js";

// src/components/presence/split-presence-props.ts
var splitPresenceProps = (props) => createSplitProps()(props, [
  "immediate",
  "lazyMount",
  "onExitComplete",
  "present",
  "unmountOnExit"
]);

// src/components/presence/use-presence.ts
import * as presence from "@zag-js/presence";
import { normalizeProps, useMachine } from "@zag-js/solid";
import { createEffect, createMemo, createSignal } from "solid-js";
var usePresence = (props) => {
  const [renderStrategyProps, context] = splitRenderStrategyProps(props);
  const [wasEverPresent, setWasEverPresent] = createSignal(false);
  const [state, send] = useMachine(presence.machine(context), {
    context
  });
  const api = createMemo(() => presence.connect(state, send, normalizeProps));
  createEffect(() => {
    const present = api().present;
    if (present) setWasEverPresent(true);
  });
  return createMemo(() => ({
    unmounted: !api().present && !wasEverPresent() && renderStrategyProps.lazyMount || renderStrategyProps.unmountOnExit && !api().present && wasEverPresent(),
    present: api().present,
    presenceProps: {
      ref: api().setNode,
      hidden: !api().present,
      "data-state": context.present ? "open" : "closed"
    }
  }));
};

// src/components/presence/presence.tsx
var Presence = (props) => {
  const [presenceProps, localProps] = splitPresenceProps(props);
  const api = usePresence(presenceProps);
  const mergedProps = mergeProps(() => api().presenceProps, localProps);
  return <Show when={!api().unmounted}>
      <ark.div {...mergedProps} data-scope="presence" data-part="root" />
    </Show>;
};

// src/components/presence/use-presence-context.ts
var [PresenceProvider, usePresenceContext] = createContext({
  hookName: "usePresenceContext",
  providerName: "<PresenceProvider />"
});

export {
  splitPresenceProps,
  usePresence,
  Presence,
  PresenceProvider,
  usePresenceContext
};
