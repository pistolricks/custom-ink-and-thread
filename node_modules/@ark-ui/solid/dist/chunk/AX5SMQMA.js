import { useFieldContext } from './X3BMEEJH.js';
import { createSplitProps } from './ZMHI4GDJ.js';
import { ark } from './EPLBB4QN.js';
import { useEnvironmentContext } from './QODB3C3M.js';
import { useLocaleContext } from './HPDOBQ3V.js';
import { createContext } from './I5UG2QUO.js';
import { __export } from './ESLJRKWD.js';
import { createComponent, mergeProps as mergeProps$1 } from 'solid-js/web';
import { mergeProps, useMachine, normalizeProps } from '@zag-js/solid';
import { createMemo, createUniqueId } from 'solid-js';
import * as rating from '@zag-js/rating-group';
export { anatomy } from '@zag-js/rating-group';

// src/components/rating-group/use-rating-group-context.ts
var [RatingGroupProvider, useRatingGroupContext] = createContext({
  hookName: "useRatingGroupContext",
  providerName: "<RatingGroupProvider />"
});

// src/components/rating-group/rating-group-context.tsx
var RatingGroupContext = (props) => props.children(useRatingGroupContext());
var RatingGroupControl = (props) => {
  const ratingGroup = useRatingGroupContext();
  const mergedProps = mergeProps(() => ratingGroup().getControlProps(), props);
  return createComponent(ark.div, mergedProps);
};
var RatingGroupHiddenInput = (props) => {
  const ratingGroup = useRatingGroupContext();
  const mergedProps = mergeProps(() => ratingGroup().getHiddenInputProps(), props);
  const field = useFieldContext();
  return createComponent(ark.input, mergeProps$1({
    get ["aria-describedby"]() {
      return field?.().ariaDescribedby;
    }
  }, mergedProps));
};

// src/components/rating-group/use-rating-group-item-context.ts
var [RatingGroupItemProvider, useRatingGroupItemContext] = createContext({
  hookName: "useRatingGroupItemContext",
  providerName: "<RatingGroupItemProvider />"
});

// src/components/rating-group/rating-group-item.tsx
var RatingGroupItem = (props) => {
  const [itemProps, localProps] = createSplitProps()(props, ["index"]);
  const api = useRatingGroupContext();
  const mergedProps = mergeProps(() => api().getItemProps(itemProps), localProps);
  const itemState = createMemo(() => api().getItemState(itemProps));
  return createComponent(RatingGroupItemProvider, {
    value: itemState,
    get children() {
      return createComponent(ark.span, mergedProps);
    }
  });
};

// src/components/rating-group/rating-group-item-context.tsx
var RatingGroupItemContext = (props) => props.children(useRatingGroupItemContext());
var RatingGroupLabel = (props) => {
  const api = useRatingGroupContext();
  const mergedProps = mergeProps(() => api().getLabelProps(), props);
  return createComponent(ark.label, mergedProps);
};
var useRatingGroup = (props = {}) => {
  const locale = useLocaleContext();
  const environment = useEnvironmentContext();
  const id = createUniqueId();
  const field = useFieldContext();
  const context = createMemo(() => ({
    id,
    ids: {
      label: field?.().ids.label,
      hiddenInput: field?.().ids.control
    },
    disabled: field?.().disabled,
    readOnly: field?.().readOnly,
    required: field?.().required,
    dir: locale().dir,
    getRootNode: environment().getRootNode,
    value: props.defaultValue,
    ...props
  }));
  const [state, send] = useMachine(rating.machine(context()), { context });
  return createMemo(() => rating.connect(state, send, normalizeProps));
};

// src/components/rating-group/rating-group-root.tsx
var RatingGroupRoot = (props) => {
  const [useRatingProps, localProps] = createSplitProps()(props, ["allowHalf", "autoFocus", "count", "defaultValue", "disabled", "form", "id", "ids", "name", "onHoverChange", "onValueChange", "readOnly", "required", "translations", "value"]);
  const api = useRatingGroup(useRatingProps);
  const mergedProps = mergeProps(() => api().getRootProps(), localProps);
  return createComponent(RatingGroupProvider, {
    value: api,
    get children() {
      return createComponent(ark.div, mergedProps);
    }
  });
};
var RatingGroupRootProvider = (props) => {
  const [{
    value: ratingGroup
  }, localProps] = createSplitProps()(props, ["value"]);
  const mergedProps = mergeProps(() => ratingGroup().getRootProps(), localProps);
  return createComponent(RatingGroupProvider, {
    value: ratingGroup,
    get children() {
      return createComponent(ark.div, mergedProps);
    }
  });
};

// src/components/rating-group/rating-group.ts
var rating_group_exports = {};
__export(rating_group_exports, {
  Context: () => RatingGroupContext,
  Control: () => RatingGroupControl,
  HiddenInput: () => RatingGroupHiddenInput,
  Item: () => RatingGroupItem,
  ItemContext: () => RatingGroupItemContext,
  Label: () => RatingGroupLabel,
  Root: () => RatingGroupRoot,
  RootProvider: () => RatingGroupRootProvider
});

export { RatingGroupContext, RatingGroupControl, RatingGroupHiddenInput, RatingGroupItem, RatingGroupItemContext, RatingGroupLabel, RatingGroupRoot, RatingGroupRootProvider, rating_group_exports, useRatingGroup, useRatingGroupContext, useRatingGroupItemContext };
