import { splitRenderStrategyProps } from './L7OSYHVR.js';
import { createSplitProps } from './ZMHI4GDJ.js';
import { ark } from './EPLBB4QN.js';
import { useEnvironmentContext } from './QODB3C3M.js';
import { useLocaleContext } from './HPDOBQ3V.js';
import { createContext } from './I5UG2QUO.js';
import { __export } from './ESLJRKWD.js';
import { createComponent } from 'solid-js/web';
import { mergeProps, useMachine, normalizeProps } from '@zag-js/solid';
import { Show, createUniqueId, createMemo, createSignal, createEffect } from 'solid-js';
import * as collapsible from '@zag-js/collapsible';
export { anatomy } from '@zag-js/collapsible';

// src/components/collapsible/use-collapsible-context.ts
var [CollapsibleProvider, useCollapsibleContext] = createContext({
  hookName: "useCollapsibleContext",
  providerName: "<CollapsibleProvider />"
});

// src/components/collapsible/collapsible-content.tsx
var CollapsibleContent = (props) => {
  const api = useCollapsibleContext();
  const mergedProps = mergeProps(() => api().getContentProps(), props);
  return createComponent(Show, {
    get when() {
      return !api().unmounted;
    },
    get children() {
      return createComponent(ark.div, mergedProps);
    }
  });
};

// src/components/collapsible/collapsible-context.tsx
var CollapsibleContext = (props) => props.children(useCollapsibleContext());
var useCollapsible = (props = {}) => {
  const locale = useLocaleContext();
  const environment = useEnvironmentContext();
  const [renderStrategyProps, collapsibleProps] = splitRenderStrategyProps(props);
  const id = createUniqueId();
  const context = createMemo(() => ({
    id,
    dir: locale().dir,
    getRootNode: environment().getRootNode,
    open: props.defaultOpen,
    "open.controlled": props.open !== void 0,
    ...collapsibleProps
  }));
  const [state, send] = useMachine(collapsible.machine(context()), { context });
  const [wasVisible, setWasVisible] = createSignal(false);
  createEffect(() => {
    const isPresent = api().visible;
    if (isPresent) setWasVisible(true);
  });
  const api = createMemo(() => collapsible.connect(state, send, normalizeProps));
  return createMemo(() => ({
    ...api(),
    unmounted: !api().visible && !wasVisible() && renderStrategyProps.lazyMount || renderStrategyProps.unmountOnExit && !api().visible && wasVisible()
  }));
};

// src/components/collapsible/collapsible-root.tsx
var CollapsibleRoot = (props) => {
  const [useCollapsibleProps, localProps] = createSplitProps()(props, ["defaultOpen", "disabled", "id", "ids", "lazyMount", "onExitComplete", "onOpenChange", "open", "unmountOnExit"]);
  const api = useCollapsible(useCollapsibleProps);
  const mergedProps = mergeProps(() => api().getRootProps(), localProps);
  return createComponent(CollapsibleProvider, {
    value: api,
    get children() {
      return createComponent(ark.div, mergedProps);
    }
  });
};
var CollapsibleRootProvider = (props) => {
  const [{
    value: collapsible2
  }, localProps] = createSplitProps()(props, ["value"]);
  const mergedProps = mergeProps(() => collapsible2().getRootProps(), localProps);
  return createComponent(CollapsibleProvider, {
    value: collapsible2,
    get children() {
      return createComponent(ark.div, mergedProps);
    }
  });
};
var CollapsibleTrigger = (props) => {
  const api = useCollapsibleContext();
  const mergedProps = mergeProps(() => api().getTriggerProps(), props);
  return createComponent(ark.button, mergedProps);
};

// src/components/collapsible/collapsible.ts
var collapsible_exports = {};
__export(collapsible_exports, {
  Content: () => CollapsibleContent,
  Context: () => CollapsibleContext,
  Root: () => CollapsibleRoot,
  RootProvider: () => CollapsibleRootProvider,
  Trigger: () => CollapsibleTrigger
});

export { CollapsibleContent, CollapsibleContext, CollapsibleRoot, CollapsibleRootProvider, CollapsibleTrigger, collapsible_exports, useCollapsible, useCollapsibleContext };
