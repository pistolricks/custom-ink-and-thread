import { ark } from './EPLBB4QN.js';
import { createContext } from './I5UG2QUO.js';
import { __export } from './ESLJRKWD.js';
import { normalizeProps, mergeProps, useMachine, useActor } from '@zag-js/solid';
import * as toast from '@zag-js/toast';
export { anatomy } from '@zag-js/toast';
import { createComponent, spread, mergeProps as mergeProps$1, insert, template } from 'solid-js/web';
import { splitProps, createMemo, For } from 'solid-js';

var createToaster = (props) => {
  const machine = toast.group.machine({
    id: "1",
    ...props
  });
  const api = toast.group.connect(machine, machine.send, normalizeProps);
  return {
    ...api,
    machine
  };
};

// src/components/toast/use-toast-context.ts
var [ToastProvider, useToastContext] = createContext({
  hookName: "useToastContext",
  providerName: "<ToastProvider />"
});

// src/components/toast/toast-action-trigger.tsx
var ToastActionTrigger = (props) => {
  const toast3 = useToastContext();
  const mergedProps = mergeProps(() => toast3().getActionTriggerProps(), props);
  return createComponent(ark.button, mergedProps);
};
var ToastCloseTrigger = (props) => {
  const toast3 = useToastContext();
  const mergedProps = mergeProps(() => toast3().getCloseTriggerProps(), props);
  return createComponent(ark.button, mergedProps);
};

// src/components/toast/toast-context.tsx
var ToastContext = (props) => props.children(useToastContext());
var ToastDescription = (props) => {
  const toast3 = useToastContext();
  const mergedProps = mergeProps(() => toast3().getDescriptionProps(), props);
  return createComponent(ark.div, mergedProps);
};
var _tmpl$ = /* @__PURE__ */ template(`<div><div></div><div>`);
var ToastRoot = (props) => {
  const toast3 = useToastContext();
  const mergedProps = mergeProps(() => toast3().getRootProps(), props);
  return (() => {
    var _el$ = _tmpl$(), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling;
    spread(_el$, mergedProps, false, true);
    spread(_el$2, mergeProps$1(() => toast3().getGhostBeforeProps()), false, false);
    insert(_el$, () => props.children, _el$3);
    spread(_el$3, mergeProps$1(() => toast3().getGhostAfterProps()), false, false);
    return _el$;
  })();
};
var ToastTitle = (props) => {
  const toast3 = useToastContext();
  const mergedProps = mergeProps(() => toast3().getTitleProps(), props);
  return createComponent(ark.div, mergedProps);
};
var Toaster = (props) => {
  const [toasterProps, localProps] = splitProps(props, ["toaster", "children"]);
  const [state, send] = useMachine(toasterProps.toaster.machine);
  const placement = state.context.placement;
  const api = createMemo(() => toast.group.connect(state, send, normalizeProps));
  const toasts = createMemo(() => api().getToastsByPlacement(placement));
  const mergedProps = mergeProps(api().getGroupProps({
    placement
  }), localProps);
  return createComponent(ark.div, mergeProps$1(mergedProps, {
    get children() {
      return createComponent(For, {
        get each() {
          return toasts();
        },
        children: (toast3) => createComponent(ToastActor, {
          value: toast3,
          children: (ctx) => toasterProps.children(ctx)
        })
      });
    }
  }));
};
var ToastActor = (props) => {
  const [state, send] = useActor(props.value);
  const api = createMemo(() => toast.connect(state, send, normalizeProps));
  const ctx = createMemo(() => state.context);
  return createComponent(ToastProvider, {
    value: api,
    get children() {
      return props.children(ctx);
    }
  });
};

// src/components/toast/toast.ts
var toast_exports = {};
__export(toast_exports, {
  ActionTrigger: () => ToastActionTrigger,
  CloseTrigger: () => ToastCloseTrigger,
  Context: () => ToastContext,
  Description: () => ToastDescription,
  Root: () => ToastRoot,
  Title: () => ToastTitle
});

export { ToastActionTrigger, ToastCloseTrigger, ToastContext, ToastDescription, ToastRoot, ToastTitle, Toaster, createToaster, toast_exports, useToastContext };
