import { createSplitProps } from './ZMHI4GDJ.js';
import { ark } from './EPLBB4QN.js';
import { useEnvironmentContext } from './QODB3C3M.js';
import { useLocaleContext } from './HPDOBQ3V.js';
import { createContext } from './I5UG2QUO.js';
import { __export } from './ESLJRKWD.js';
import { createComponent } from 'solid-js/web';
import { mergeProps, useMachine, normalizeProps } from '@zag-js/solid';
import * as toggleGroup from '@zag-js/toggle-group';
export { anatomy } from '@zag-js/toggle-group';
import { createUniqueId, createMemo } from 'solid-js';

// src/components/toggle-group/use-toggle-group-context.ts
var [ToggleGroupProvider, useToggleGroupContext] = createContext({
  hookName: "useToggleGroupContext",
  providerName: "<ToggleGroupProvider />"
});

// src/components/toggle-group/toggle-group-context.tsx
var ToggleGroupContext = (props) => props.children(useToggleGroupContext());
var ToggleGroupItem = (props) => {
  const [toggleProps, restProps] = createSplitProps()(props, ["value", "disabled"]);
  const api = useToggleGroupContext();
  const mergedProps = mergeProps(() => api().getItemProps(toggleProps), restProps);
  return createComponent(ark.button, mergedProps);
};
var useToggleGroup = (props = {}) => {
  const locale = useLocaleContext();
  const environment = useEnvironmentContext();
  const id = createUniqueId();
  const context = createMemo(() => ({
    id,
    dir: locale().dir,
    getRootNode: environment().getRootNode,
    value: props.defaultValue,
    ...props
  }));
  const [state, send] = useMachine(toggleGroup.machine(context()), {
    context
  });
  return createMemo(() => toggleGroup.connect(state, send, normalizeProps));
};

// src/components/toggle-group/toggle-group-root.tsx
var ToggleGroupRoot = (props) => {
  const [useToggleGroupProps, restProps] = createSplitProps()(props, ["defaultValue", "disabled", "id", "ids", "loopFocus", "multiple", "onValueChange", "orientation", "rovingFocus", "value"]);
  const api = useToggleGroup(useToggleGroupProps);
  const mergedProps = mergeProps(() => api().getRootProps(), restProps);
  return createComponent(ToggleGroupProvider, {
    value: api,
    get children() {
      return createComponent(ark.div, mergedProps);
    }
  });
};
var ToggleGroupRootProvider = (props) => {
  const [{
    value: toggleGroup2
  }, localProps] = createSplitProps()(props, ["value"]);
  const mergedProps = mergeProps(() => toggleGroup2().getRootProps(), localProps);
  return createComponent(ToggleGroupProvider, {
    value: toggleGroup2,
    get children() {
      return createComponent(ark.div, mergedProps);
    }
  });
};

// src/components/toggle-group/toggle-group.ts
var toggle_group_exports = {};
__export(toggle_group_exports, {
  Context: () => ToggleGroupContext,
  Item: () => ToggleGroupItem,
  Root: () => ToggleGroupRoot,
  RootProvider: () => ToggleGroupRootProvider
});

export { ToggleGroupContext, ToggleGroupItem, ToggleGroupRoot, ToggleGroupRootProvider, toggle_group_exports, useToggleGroup, useToggleGroupContext };
