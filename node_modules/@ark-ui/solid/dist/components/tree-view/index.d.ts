import * as treeView$1 from '@zag-js/tree-view';
import { NodeState, NodeProps, ExpandedChangeDetails, FocusChangeDetails, SelectionChangeDetails } from '@zag-js/tree-view';
export { ExpandedChangeDetails as TreeViewExpandedChangeDetails, FocusChangeDetails as TreeViewFocusChangeDetails, SelectionChangeDetails as TreeViewSelectionChangeDetails, anatomy as treeViewAnatomy } from '@zag-js/tree-view';
export { createFileTreeCollection, createTreeCollection } from '../collection.js';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { A as Assign, O as Optional } from '../../types-B277wCdv.js';
import { PolymorphicProps, HTMLProps } from '../factory.js';
import { TreeNode, TreeCollection } from '@zag-js/collection';
export { TreeCollection, TreeNode } from '@zag-js/collection';
import { PropTypes } from '@zag-js/solid';
import { R as RenderStrategyProps } from '../../render-strategy-B5MqQP3X.js';

interface TreeViewBranchBaseProps extends PolymorphicProps<'div'> {
}
interface TreeViewBranchProps extends Assign<HTMLProps<'div'>, TreeViewBranchBaseProps> {
}
declare const TreeViewBranch: (props: TreeViewBranchProps) => solid_js.JSX.Element;

interface TreeViewBranchContentBaseProps extends PolymorphicProps<'div'> {
}
interface TreeViewBranchContentProps extends HTMLProps<'div'>, TreeViewBranchContentBaseProps {
}
declare const TreeViewBranchContent: (props: TreeViewBranchContentProps) => solid_js.JSX.Element;

interface TreeViewBranchControlBaseProps extends PolymorphicProps<'div'> {
}
interface TreeViewBranchControlProps extends HTMLProps<'div'>, TreeViewBranchControlBaseProps {
}
declare const TreeViewBranchControl: (props: TreeViewBranchControlProps) => solid_js.JSX.Element;

interface TreeViewBranchIndentGuideBaseProps extends PolymorphicProps<'div'> {
}
interface TreeViewBranchIndentGuideProps extends HTMLProps<'div'>, TreeViewBranchIndentGuideBaseProps {
}
declare const TreeViewBranchIndentGuide: (props: TreeViewBranchIndentGuideProps) => solid_js.JSX.Element;

interface TreeViewBranchIndicatorBaseProps extends PolymorphicProps<'div'> {
}
interface TreeViewBranchIndicatorProps extends HTMLProps<'div'>, TreeViewBranchIndicatorBaseProps {
}
declare const TreeViewBranchIndicator: (props: TreeViewBranchIndicatorProps) => solid_js.JSX.Element;

interface TreeViewBranchTextBaseProps extends PolymorphicProps<'span'> {
}
interface TreeViewBranchTextProps extends HTMLProps<'span'>, TreeViewBranchTextBaseProps {
}
declare const TreeViewBranchText: (props: TreeViewBranchTextProps) => solid_js.JSX.Element;

interface TreeViewBranchTriggerBaseProps extends PolymorphicProps<'div'> {
}
interface TreeViewBranchTriggerProps extends HTMLProps<'div'>, TreeViewBranchTriggerBaseProps {
}
declare const TreeViewBranchTrigger: (props: TreeViewBranchTriggerProps) => solid_js.JSX.Element;

interface UseTreeViewProps<T extends TreeNode> extends Optional<Omit<treeView$1.Context, 'dir' | 'getRootNode' | 'colllection'>, 'id'> {
    /**
     * The initial selected items of the tree view.
     * Use this when you do not need to control the state of the tree view.
     */
    defaultSelectedValue?: treeView$1.Context['selectedValue'];
    /**
     * The initial expanded items of the tree view.
     * Use this when you do not need to control the state of the tree view.
     */
    defaultExpandedValue?: treeView$1.Context['expandedValue'];
    /**
     * The collection of tree nodes
     */
    collection: TreeCollection<T>;
}
interface UseTreeViewReturn<T extends TreeNode> extends Accessor<treeView$1.Api<PropTypes, T>> {
}
declare const useTreeView: <T extends unknown>(props: UseTreeViewProps<T>) => UseTreeViewReturn<T>;

interface UseTreeViewContext<T extends TreeNode> extends UseTreeViewReturn<T> {
}

interface TreeViewContextProps<T extends TreeNode> {
    children: (context: UseTreeViewContext<T>) => JSX.Element;
}
declare const TreeViewContext: <T extends unknown>(props: TreeViewContextProps<T>) => JSX.Element;

interface TreeViewItemBaseProps extends PolymorphicProps<'div'> {
}
interface TreeViewItemProps extends Assign<HTMLProps<'div'>, TreeViewItemBaseProps> {
}
declare const TreeViewItem: (props: TreeViewItemProps) => solid_js.JSX.Element;

interface TreeViewItemIndicatorBaseProps extends PolymorphicProps<'div'> {
}
interface TreeViewItemIndicatorProps extends HTMLProps<'div'>, TreeViewItemIndicatorBaseProps {
}
declare const TreeViewItemIndicator: (props: TreeViewItemIndicatorProps) => solid_js.JSX.Element;

interface TreeViewItemTextBaseProps extends PolymorphicProps<'span'> {
}
interface TreeViewItemTextProps extends HTMLProps<'span'>, TreeViewItemTextBaseProps {
}
declare const TreeViewItemText: (props: TreeViewItemTextProps) => solid_js.JSX.Element;

interface TreeViewLabelBaseProps extends PolymorphicProps<'label'> {
}
interface TreeViewLabelProps extends HTMLProps<'label'>, TreeViewLabelBaseProps {
}
declare const TreeViewLabel: (props: TreeViewLabelProps) => solid_js.JSX.Element;

interface UseTreeViewNodeContext extends Accessor<NodeState> {
}

interface TreeViewNodeContextProps {
    children: (context: UseTreeViewNodeContext) => JSX.Element;
}
declare const TreeViewNodeContext: (props: TreeViewNodeContextProps) => JSX.Element;

interface TreeViewNodeProviderBaseProps<T> extends NodeProps {
    node: T;
}
interface TreeViewNodeProviderProps<T> extends TreeViewNodeProviderBaseProps<T> {
    children?: JSX.Element;
}
declare function TreeViewNodeProvider<T>(props: TreeViewNodeProviderProps<T>): JSX.Element;

interface TreeViewRootBaseProps<T extends TreeNode> extends UseTreeViewProps<T>, RenderStrategyProps, PolymorphicProps<'div'> {
}
interface TreeViewRootProps<T extends TreeNode> extends HTMLProps<'div'>, TreeViewRootBaseProps<T> {
}
declare const TreeViewRoot: <T extends unknown>(props: TreeViewRootProps<T>) => solid_js.JSX.Element;

interface RootProviderProps<T extends TreeNode> {
    value: UseTreeViewReturn<T>;
}
interface TreeViewRootProviderBaseProps<T extends TreeNode> extends RootProviderProps<T>, RenderStrategyProps, PolymorphicProps<'div'> {
}
interface TreeViewRootProviderProps<T extends TreeNode> extends HTMLProps<'div'>, TreeViewRootProviderBaseProps<T> {
}
declare const TreeViewRootProvider: <T extends unknown>(props: TreeViewRootProviderProps<T>) => solid_js.JSX.Element;

interface TreeViewTreeBaseProps extends PolymorphicProps<'div'> {
}
interface TreeViewTreeProps extends HTMLProps<'div'>, TreeViewTreeBaseProps {
}
declare const TreeViewTree: (props: TreeViewTreeProps) => solid_js.JSX.Element;

declare const treeView_ExpandedChangeDetails: typeof ExpandedChangeDetails;
declare const treeView_FocusChangeDetails: typeof FocusChangeDetails;
declare const treeView_SelectionChangeDetails: typeof SelectionChangeDetails;
declare namespace treeView {
  export { TreeViewBranch as Branch, type TreeViewBranchBaseProps as BranchBaseProps, TreeViewBranchContent as BranchContent, type TreeViewBranchContentBaseProps as BranchContentBaseProps, type TreeViewBranchContentProps as BranchContentProps, TreeViewBranchControl as BranchControl, type TreeViewBranchControlBaseProps as BranchControlBaseProps, type TreeViewBranchControlProps as BranchControlProps, TreeViewBranchIndentGuide as BranchIndentGuide, type TreeViewBranchIndentGuideBaseProps as BranchIndentGuideBaseProps, type TreeViewBranchIndentGuideProps as BranchIndentGuideProps, TreeViewBranchIndicator as BranchIndicator, type TreeViewBranchIndicatorBaseProps as BranchIndicatorBaseProps, type TreeViewBranchIndicatorProps as BranchIndicatorProps, type TreeViewBranchProps as BranchProps, TreeViewBranchText as BranchText, type TreeViewBranchTextBaseProps as BranchTextBaseProps, type TreeViewBranchTextProps as BranchTextProps, TreeViewBranchTrigger as BranchTrigger, type TreeViewBranchTriggerBaseProps as BranchTriggerBaseProps, type TreeViewBranchTriggerProps as BranchTriggerProps, TreeViewContext as Context, type TreeViewContextProps as ContextProps, treeView_ExpandedChangeDetails as ExpandedChangeDetails, treeView_FocusChangeDetails as FocusChangeDetails, TreeViewItem as Item, type TreeViewItemBaseProps as ItemBaseProps, TreeViewItemIndicator as ItemIndicator, type TreeViewItemIndicatorBaseProps as ItemIndicatorBaseProps, type TreeViewItemIndicatorProps as ItemIndicatorProps, type TreeViewItemProps as ItemProps, TreeViewItemText as ItemText, type TreeViewItemTextBaseProps as ItemTextBaseProps, type TreeViewItemTextProps as ItemTextProps, TreeViewLabel as Label, type TreeViewLabelBaseProps as LabelBaseProps, type TreeViewLabelProps as LabelProps, TreeViewNodeContext as NodeContext, type TreeViewNodeContextProps as NodeContextProps, TreeViewNodeProvider as NodeProvider, type TreeViewNodeProviderBaseProps as NodeProviderBaseProps, type TreeViewNodeProviderProps as NodeProviderProps, TreeViewRoot as Root, type TreeViewRootBaseProps as RootBaseProps, type TreeViewRootProps as RootProps, TreeViewRootProvider as RootProvider, type TreeViewRootProviderBaseProps as RootProviderBaseProps, type TreeViewRootProviderProps as RootProviderProps, treeView_SelectionChangeDetails as SelectionChangeDetails, TreeViewTree as Tree, type TreeViewTreeBaseProps as TreeBaseProps, type TreeViewTreeProps as TreeProps };
}

export { treeView as TreeView, TreeViewBranch, type TreeViewBranchBaseProps, TreeViewBranchContent, type TreeViewBranchContentBaseProps, type TreeViewBranchContentProps, TreeViewBranchControl, type TreeViewBranchControlBaseProps, type TreeViewBranchControlProps, TreeViewBranchIndentGuide, type TreeViewBranchIndentGuideBaseProps, type TreeViewBranchIndentGuideProps, TreeViewBranchIndicator, type TreeViewBranchIndicatorBaseProps, type TreeViewBranchIndicatorProps, type TreeViewBranchProps, TreeViewBranchText, type TreeViewBranchTextBaseProps, type TreeViewBranchTextProps, TreeViewBranchTrigger, type TreeViewBranchTriggerBaseProps, type TreeViewBranchTriggerProps, TreeViewContext, type TreeViewContextProps, TreeViewItem, type TreeViewItemBaseProps, TreeViewItemIndicator, type TreeViewItemIndicatorBaseProps, type TreeViewItemIndicatorProps, type TreeViewItemProps, TreeViewItemText, type TreeViewItemTextBaseProps, type TreeViewItemTextProps, TreeViewLabel, type TreeViewLabelBaseProps, type TreeViewLabelProps, TreeViewNodeContext, type TreeViewNodeContextProps, TreeViewNodeProvider, type TreeViewNodeProviderBaseProps, type TreeViewNodeProviderProps, TreeViewRoot, type TreeViewRootBaseProps, type TreeViewRootProps, TreeViewRootProvider, type TreeViewRootProviderBaseProps, type TreeViewRootProviderProps, TreeViewTree, type TreeViewTreeBaseProps, type TreeViewTreeProps, type UseTreeViewProps, type UseTreeViewReturn, useTreeView };
