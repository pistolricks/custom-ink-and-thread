import * as tooltip$1 from '@zag-js/tooltip';
import { OpenChangeDetails } from '@zag-js/tooltip';
export { OpenChangeDetails as TooltipOpenChangeDetails, anatomy as tooltipAnatomy } from '@zag-js/tooltip';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PolymorphicProps, HTMLProps } from '../factory.js';
import { PropTypes } from '@zag-js/solid';
import { O as Optional } from '../../types-B277wCdv.js';
import { U as UsePresenceProps } from '../../use-presence-Ct1onT3-.js';
import '@zag-js/presence';
import '../../render-strategy-B5MqQP3X.js';

interface TooltipArrowBaseProps extends PolymorphicProps<'div'> {
}
interface TooltipArrowProps extends HTMLProps<'div'>, TooltipArrowBaseProps {
}
declare const TooltipArrow: (props: TooltipArrowProps) => solid_js.JSX.Element;

interface TooltipArrowTipBaseProps extends PolymorphicProps<'div'> {
}
interface TooltipArrowTipProps extends HTMLProps<'div'>, TooltipArrowTipBaseProps {
}
declare const TooltipArrowTip: (props: TooltipArrowTipProps) => solid_js.JSX.Element;

interface TooltipContentBaseProps extends PolymorphicProps<'div'> {
}
interface TooltipContentProps extends HTMLProps<'div'>, TooltipContentBaseProps {
}
declare const TooltipContent: (props: TooltipContentProps) => solid_js.JSX.Element;

interface UseTooltipProps extends Optional<Omit<tooltip$1.Context, 'dir' | 'getRootNode' | 'open.controlled'>, 'id'> {
    /**
     * The initial open state of the tooltip when it is first rendered.
     * Use when you do not need to control its open state.
     */
    defaultOpen?: tooltip$1.Context['open'];
}
interface UseTooltipReturn extends Accessor<tooltip$1.Api<PropTypes>> {
}
declare const useTooltip: (props?: UseTooltipProps) => UseTooltipReturn;

interface UseTooltipContext extends UseTooltipReturn {
}
declare const useTooltipContext: () => UseTooltipContext;

interface TooltipContextProps {
    children: (context: UseTooltipContext) => JSX.Element;
}
declare const TooltipContext: (props: TooltipContextProps) => JSX.Element;

interface TooltipPositionerBaseProps extends PolymorphicProps<'div'> {
}
interface TooltipPositionerProps extends HTMLProps<'div'>, TooltipPositionerBaseProps {
}
declare const TooltipPositioner: (props: TooltipPositionerProps) => solid_js.JSX.Element;

interface TooltipRootBaseProps extends UseTooltipProps, UsePresenceProps {
}
interface TooltipRootProps extends TooltipRootBaseProps {
    children?: JSX.Element;
}
declare const TooltipRoot: (props: TooltipRootProps) => JSX.Element;

interface RootProviderProps {
    value: UseTooltipReturn;
}
interface TooltipRootProviderBaseProps extends RootProviderProps, UsePresenceProps {
}
interface TooltipRootProviderProps extends TooltipRootProviderBaseProps {
    children?: JSX.Element;
}
declare const TooltipRootProvider: (props: TooltipRootProviderProps) => JSX.Element;

interface TooltipTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface TooltipTriggerProps extends HTMLProps<'button'>, TooltipTriggerBaseProps {
}
declare const TooltipTrigger: (props: TooltipTriggerProps) => solid_js.JSX.Element;

declare const tooltip_OpenChangeDetails: typeof OpenChangeDetails;
declare namespace tooltip {
  export { TooltipArrow as Arrow, type TooltipArrowBaseProps as ArrowBaseProps, type TooltipArrowProps as ArrowProps, TooltipArrowTip as ArrowTip, type TooltipArrowTipBaseProps as ArrowTipBaseProps, type TooltipArrowTipProps as ArrowTipProps, TooltipContent as Content, type TooltipContentBaseProps as ContentBaseProps, type TooltipContentProps as ContentProps, TooltipContext as Context, type TooltipContextProps as ContextProps, tooltip_OpenChangeDetails as OpenChangeDetails, TooltipPositioner as Positioner, type TooltipPositionerBaseProps as PositionerBaseProps, type TooltipPositionerProps as PositionerProps, TooltipRoot as Root, type TooltipRootBaseProps as RootBaseProps, type TooltipRootProps as RootProps, TooltipRootProvider as RootProvider, type TooltipRootProviderBaseProps as RootProviderBaseProps, type TooltipRootProviderProps as RootProviderProps, TooltipTrigger as Trigger, type TooltipTriggerBaseProps as TriggerBaseProps, type TooltipTriggerProps as TriggerProps };
}

export { tooltip as Tooltip, TooltipArrow, type TooltipArrowBaseProps, type TooltipArrowProps, TooltipArrowTip, type TooltipArrowTipBaseProps, type TooltipArrowTipProps, TooltipContent, type TooltipContentBaseProps, type TooltipContentProps, TooltipContext, type TooltipContextProps, TooltipPositioner, type TooltipPositionerBaseProps, type TooltipPositionerProps, TooltipRoot, type TooltipRootBaseProps, type TooltipRootProps, TooltipRootProvider, type TooltipRootProviderBaseProps, type TooltipRootProviderProps, TooltipTrigger, type TooltipTriggerBaseProps, type TooltipTriggerProps, type UseTooltipContext, type UseTooltipProps, type UseTooltipReturn, useTooltip, useTooltipContext };
