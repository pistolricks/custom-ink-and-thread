import * as editable$1 from '@zag-js/editable';
import { ValueChangeDetails } from '@zag-js/editable';
export { EditChangeDetails as EditableEditChangeDetails, ValueChangeDetails as EditableValueChangeDetails, anatomy as editableAnatomy } from '@zag-js/editable';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PolymorphicProps, HTMLProps } from '../factory.js';
import { PropTypes } from '@zag-js/solid';
import { O as Optional } from '../../types-B277wCdv.js';

interface EditableAreaBaseProps extends PolymorphicProps<'div'> {
}
interface EditableAreaProps extends HTMLProps<'div'>, EditableAreaBaseProps {
}
declare const EditableArea: (props: EditableAreaProps) => solid_js.JSX.Element;

interface EditableCancelTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface EditableCancelTriggerProps extends HTMLProps<'button'>, EditableCancelTriggerBaseProps {
}
declare const EditableCancelTrigger: (props: EditableCancelTriggerProps) => solid_js.JSX.Element;

interface UseEditableProps extends Optional<Omit<editable$1.Context, 'dir' | 'getRootNode' | 'edit.controlled'>, 'id'> {
    /**
     * The initial edit state of the editable when it is first rendered.
     * Use when you do not need to control its edit state.
     */
    defaultEdit?: editable$1.Context['edit'];
    /**
     * The initial value of the editable when it is first rendered.
     * Use when you do not need to control the state of the editable.
     */
    defaultValue?: editable$1.Context['value'];
}
interface UseEditableReturn extends Accessor<editable$1.Api<PropTypes>> {
}
declare const useEditable: (props?: UseEditableProps) => Accessor<editable$1.Api<PropTypes>>;

interface UseEditableContext extends UseEditableReturn {
}
declare const useEditableContext: () => UseEditableContext;

interface EditableContextProps {
    children: (context: UseEditableContext) => JSX.Element;
}
declare const EditableContext: (props: EditableContextProps) => JSX.Element;

interface EditableControlBaseProps extends PolymorphicProps<'div'> {
}
interface EditableControlProps extends HTMLProps<'div'>, EditableControlBaseProps {
}
declare const EditableControl: (props: EditableControlProps) => solid_js.JSX.Element;

interface EditableEditTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface EditableEditTriggerProps extends HTMLProps<'button'>, EditableEditTriggerBaseProps {
}
declare const EditableEditTrigger: (props: EditableEditTriggerProps) => solid_js.JSX.Element;

interface EditableInputBaseProps extends PolymorphicProps<'input'> {
}
interface EditableInputProps extends HTMLProps<'input'>, EditableInputBaseProps {
}
declare const EditableInput: (props: EditableInputProps) => solid_js.JSX.Element;

interface EditableLabelBaseProps extends PolymorphicProps<'label'> {
}
interface EditableLabelProps extends HTMLProps<'label'>, EditableLabelBaseProps {
}
declare const EditableLabel: (props: EditableLabelProps) => solid_js.JSX.Element;

interface EditablePreviewBaseProps extends PolymorphicProps<'span'> {
}
interface EditablePreviewProps extends HTMLProps<'span'>, EditablePreviewBaseProps {
}
declare const EditablePreview: (props: EditablePreviewProps) => solid_js.JSX.Element;

interface EditableRootBaseProps extends UseEditableProps, PolymorphicProps<'div'> {
}
interface EditableRootProps extends HTMLProps<'div'>, EditableRootBaseProps {
}
declare const EditableRoot: (props: EditableRootProps) => solid_js.JSX.Element;

interface RootProviderProps {
    value: UseEditableReturn;
}
interface EditableRootProviderBaseProps extends PolymorphicProps<'div'> {
}
interface EditableRootProviderProps extends HTMLProps<'div'>, RootProviderProps, EditableRootProviderBaseProps {
}
declare const EditableRootProvider: (props: EditableRootProviderProps) => solid_js.JSX.Element;

interface EditableSubmitTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface EditableSubmitTriggerProps extends HTMLProps<'button'>, EditableSubmitTriggerBaseProps {
}
declare const EditableSubmitTrigger: (props: EditableSubmitTriggerProps) => solid_js.JSX.Element;

declare const editable_ValueChangeDetails: typeof ValueChangeDetails;
declare namespace editable {
  export { EditableArea as Area, type EditableAreaBaseProps as AreaBaseProps, type EditableAreaProps as AreaProps, EditableCancelTrigger as CancelTrigger, type EditableCancelTriggerBaseProps as CancelTriggerBaseProps, type EditableCancelTriggerProps as CancelTriggerProps, EditableContext as Context, type EditableContextProps as ContextProps, EditableControl as Control, type EditableControlBaseProps as ControlBaseProps, type EditableControlProps as ControlProps, EditableEditTrigger as EditTrigger, type EditableEditTriggerBaseProps as EditTriggerBaseProps, type EditableEditTriggerProps as EditTriggerProps, EditableInput as Input, type EditableInputBaseProps as InputBaseProps, type EditableInputProps as InputProps, EditableLabel as Label, type EditableLabelBaseProps as LabelBaseProps, type EditableLabelProps as LabelProps, EditablePreview as Preview, type EditablePreviewBaseProps as PreviewBaseProps, type EditablePreviewProps as PreviewProps, EditableRoot as Root, type EditableRootBaseProps as RootBaseProps, type EditableRootProps as RootProps, EditableRootProvider as RootProvider, type EditableRootProviderBaseProps as RootProviderBaseProps, type EditableRootProviderProps as RootProviderProps, EditableSubmitTrigger as SubmitTrigger, type EditableSubmitTriggerBaseProps as SubmitTriggerBaseProps, type EditableSubmitTriggerProps as SubmitTriggerProps, editable_ValueChangeDetails as ValueChangeDetails };
}

export { editable as Editable, EditableArea, type EditableAreaBaseProps, type EditableAreaProps, EditableCancelTrigger, type EditableCancelTriggerBaseProps, type EditableCancelTriggerProps, EditableContext, type EditableContextProps, EditableControl, type EditableControlBaseProps, type EditableControlProps, EditableEditTrigger, type EditableEditTriggerBaseProps, type EditableEditTriggerProps, EditableInput, type EditableInputBaseProps, type EditableInputProps, EditableLabel, type EditableLabelBaseProps, type EditableLabelProps, EditablePreview, type EditablePreviewBaseProps, type EditablePreviewProps, EditableRoot, type EditableRootBaseProps, type EditableRootProps, EditableRootProvider, type EditableRootProviderBaseProps, type EditableRootProviderProps, EditableSubmitTrigger, type EditableSubmitTriggerBaseProps, type EditableSubmitTriggerProps, type UseEditableContext, type UseEditableProps, type UseEditableReturn, useEditable, useEditableContext };
