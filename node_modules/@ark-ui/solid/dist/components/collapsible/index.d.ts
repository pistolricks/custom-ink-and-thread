import * as collapsible$1 from '@zag-js/collapsible';
import { OpenChangeDetails } from '@zag-js/collapsible';
export { OpenChangeDetails as CollapsibleOpenChangeDetails, anatomy as collapsibleAnatomy } from '@zag-js/collapsible';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PolymorphicProps, HTMLProps } from '../factory.js';
import { PropTypes } from '@zag-js/solid';
import { O as Optional } from '../../types-B277wCdv.js';
import { R as RenderStrategyProps } from '../../render-strategy-B5MqQP3X.js';

interface CollapsibleContentBaseProps extends PolymorphicProps<'div'> {
}
interface CollapsibleContentProps extends HTMLProps<'div'>, CollapsibleContentBaseProps {
}
declare const CollapsibleContent: (props: CollapsibleContentProps) => solid_js.JSX.Element;

interface UseCollapsibleProps extends Optional<Omit<collapsible$1.Context, 'dir' | 'getRootNode' | 'open.controlled'>, 'id'>, RenderStrategyProps {
    /**
     * The initial open state of the collapsible when it is first rendered.
     * Use when you do not need to control its open state.
     */
    defaultOpen?: collapsible$1.Context['open'];
}
interface UseCollapsibleReturn extends Accessor<collapsible$1.Api<PropTypes> & {
    /**
     * Whether the content is unmounted
     */
    unmounted?: boolean;
}> {
}
declare const useCollapsible: (props?: UseCollapsibleProps) => UseCollapsibleReturn;

interface UseCollapsibleContext extends UseCollapsibleReturn {
}
declare const useCollapsibleContext: () => UseCollapsibleContext;

interface CollapsibleContextProps {
    children: (context: UseCollapsibleContext) => JSX.Element;
}
declare const CollapsibleContext: (props: CollapsibleContextProps) => JSX.Element;

interface CollapsibleRootBaseProps extends UseCollapsibleProps, PolymorphicProps<'div'> {
}
interface CollapsibleRootProps extends HTMLProps<'div'>, CollapsibleRootBaseProps {
}
declare const CollapsibleRoot: (props: CollapsibleRootProps) => solid_js.JSX.Element;

interface RootProviderProps {
    value: UseCollapsibleReturn;
}
interface CollapsibleRootProviderBaseProps extends PolymorphicProps<'div'> {
}
interface CollapsibleRootProviderProps extends HTMLProps<'div'>, RootProviderProps, CollapsibleRootProviderBaseProps {
}
declare const CollapsibleRootProvider: (props: CollapsibleRootProviderProps) => solid_js.JSX.Element;

interface CollapsibleTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface CollapsibleTriggerProps extends HTMLProps<'button'>, CollapsibleTriggerBaseProps {
}
declare const CollapsibleTrigger: (props: CollapsibleTriggerProps) => solid_js.JSX.Element;

declare const collapsible_OpenChangeDetails: typeof OpenChangeDetails;
declare namespace collapsible {
  export { CollapsibleContent as Content, type CollapsibleContentBaseProps as ContentBaseProps, type CollapsibleContentProps as ContentProps, CollapsibleContext as Context, type CollapsibleContextProps as ContextProps, collapsible_OpenChangeDetails as OpenChangeDetails, CollapsibleRoot as Root, type CollapsibleRootBaseProps as RootBaseProps, type CollapsibleRootProps as RootProps, CollapsibleRootProvider as RootProvider, type CollapsibleRootProviderBaseProps as RootProviderBaseProps, type CollapsibleRootProviderProps as RootProviderProps, CollapsibleTrigger as Trigger, type CollapsibleTriggerBaseProps as TriggerBaseProps, type CollapsibleTriggerProps as TriggerProps };
}

export { collapsible as Collapsible, CollapsibleContent, type CollapsibleContentBaseProps, type CollapsibleContentProps, CollapsibleContext, type CollapsibleContextProps, CollapsibleRoot, type CollapsibleRootBaseProps, type CollapsibleRootProps, CollapsibleRootProvider, type CollapsibleRootProviderBaseProps, type CollapsibleRootProviderProps, CollapsibleTrigger, type CollapsibleTriggerBaseProps, type CollapsibleTriggerProps, type UseCollapsibleContext, type UseCollapsibleProps, type UseCollapsibleReturn, useCollapsible, useCollapsibleContext };
