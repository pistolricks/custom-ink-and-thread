import * as radio from '@zag-js/radio-group';
import { ItemProps, ItemState, ValueChangeDetails } from '@zag-js/radio-group';
export { ValueChangeDetails as RadioGroupValueChangeDetails, anatomy as radioGroupAnatomy } from '@zag-js/radio-group';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PropTypes } from '@zag-js/solid';
import { O as Optional } from '../../types-B277wCdv.js';
import { PolymorphicProps, HTMLProps } from '../factory.js';

interface UseRadioGroupProps extends Optional<Omit<radio.Context, 'dir' | 'getRootNode'>, 'id'> {
    /**
     * The initial value of the radio group when it is first rendered.
     * Use when you do not need to control the state of the radio group.
     */
    defaultValue?: radio.Context['value'];
}
interface UseRadioGroupReturn extends Accessor<radio.Api<PropTypes>> {
}
declare const useRadioGroup: (props?: UseRadioGroupProps) => UseRadioGroupReturn;

interface UseRadioGroupContext extends UseRadioGroupReturn {
}
declare const useRadioGroupContext: () => UseRadioGroupContext;

interface RadioGroupContextProps {
    children: (context: UseRadioGroupContext) => JSX.Element;
}
declare const RadioGroupContext: (props: RadioGroupContextProps) => JSX.Element;

interface RadioGroupIndicatorBaseProps extends PolymorphicProps<'div'> {
}
interface RadioGroupIndicatorProps extends HTMLProps<'div'>, RadioGroupIndicatorBaseProps {
}
declare const RadioGroupIndicator: (props: RadioGroupIndicatorProps) => solid_js.JSX.Element;

interface RadioGroupItemBaseProps extends ItemProps, PolymorphicProps<'label'> {
}
interface RadioGroupItemProps extends HTMLProps<'label'>, RadioGroupItemBaseProps {
}
declare const RadioGroupItem: (props: RadioGroupItemProps) => solid_js.JSX.Element;

interface UseRadioGroupItemContext extends Accessor<ItemState> {
}
declare const useRadioGroupItemContext: () => UseRadioGroupItemContext;

interface RadioGroupItemContextProps {
    children: (context: UseRadioGroupItemContext) => JSX.Element;
}
declare const RadioGroupItemContext: (props: RadioGroupItemContextProps) => JSX.Element;

interface RadioGroupItemControlBaseProps extends PolymorphicProps<'div'> {
}
interface RadioGroupItemControlProps extends HTMLProps<'div'>, RadioGroupItemControlBaseProps {
}
declare const RadioGroupItemControl: (props: RadioGroupItemControlProps) => solid_js.JSX.Element;

interface RadioGroupItemHiddenInputBaseProps extends PolymorphicProps<'input'> {
}
interface RadioGroupItemHiddenInputProps extends HTMLProps<'input'>, RadioGroupItemHiddenInputBaseProps {
}
declare const RadioGroupItemHiddenInput: (props: RadioGroupItemHiddenInputProps) => solid_js.JSX.Element;

interface RadioGroupItemTextBaseProps extends PolymorphicProps<'span'> {
}
interface RadioGroupItemTextProps extends HTMLProps<'span'>, RadioGroupItemTextBaseProps {
}
declare const RadioGroupItemText: (props: RadioGroupItemTextProps) => solid_js.JSX.Element;

interface RadioGroupLabelBaseProps extends PolymorphicProps<'label'> {
}
interface RadioGroupLabelProps extends HTMLProps<'label'>, RadioGroupLabelBaseProps {
}
declare const RadioGroupLabel: (props: RadioGroupLabelProps) => solid_js.JSX.Element;

interface RadioGroupRootBaseProps extends UseRadioGroupProps, PolymorphicProps<'div'> {
}
interface RadioGroupRootProps extends HTMLProps<'div'>, RadioGroupRootBaseProps {
}
declare const RadioGroupRoot: (props: RadioGroupRootProps) => solid_js.JSX.Element;

interface RootProviderProps {
    value: UseRadioGroupReturn;
}
interface RadioGroupRootProviderBaseProps extends PolymorphicProps<'div'> {
}
interface RadioGroupRootProviderProps extends HTMLProps<'div'>, RootProviderProps, RadioGroupRootProviderBaseProps {
}
declare const RadioGroupRootProvider: (props: RadioGroupRootProviderProps) => solid_js.JSX.Element;

declare const radioGroup_ValueChangeDetails: typeof ValueChangeDetails;
declare namespace radioGroup {
  export { RadioGroupContext as Context, RadioGroupContext as ContextProps, RadioGroupIndicator as Indicator, type RadioGroupIndicatorBaseProps as IndicatorBaseProps, type RadioGroupIndicatorProps as IndicatorProps, RadioGroupItem as Item, type RadioGroupItemBaseProps as ItemBaseProps, RadioGroupItemContext as ItemContext, RadioGroupItemContext as ItemContextProps, RadioGroupItemControl as ItemControl, type RadioGroupItemControlBaseProps as ItemControlBaseProps, type RadioGroupItemControlProps as ItemControlProps, RadioGroupItemHiddenInput as ItemHiddenInput, type RadioGroupItemHiddenInputBaseProps as ItemHiddenInputBaseProps, type RadioGroupItemHiddenInputProps as ItemHiddenInputProps, type RadioGroupItemProps as ItemProps, RadioGroupItemText as ItemText, type RadioGroupItemTextBaseProps as ItemTextBaseProps, type RadioGroupItemTextProps as ItemTextProps, RadioGroupLabel as Label, type RadioGroupLabelBaseProps as LabelBaseProps, type RadioGroupLabelProps as LabelProps, RadioGroupRoot as Root, type RadioGroupRootBaseProps as RootBaseProps, type RadioGroupRootProps as RootProps, RadioGroupRootProvider as RootProvider, type RadioGroupRootProviderBaseProps as RootProviderBaseProps, type RadioGroupRootProviderProps as RootProviderProps, radioGroup_ValueChangeDetails as ValueChangeDetails };
}

export { radioGroup as RadioGroup, RadioGroupContext, type RadioGroupContextProps, RadioGroupIndicator, type RadioGroupIndicatorBaseProps, type RadioGroupIndicatorProps, RadioGroupItem, type RadioGroupItemBaseProps, RadioGroupItemContext, type RadioGroupItemContextProps, RadioGroupItemControl, type RadioGroupItemControlBaseProps, type RadioGroupItemControlProps, RadioGroupItemHiddenInput, type RadioGroupItemHiddenInputBaseProps, type RadioGroupItemHiddenInputProps, type RadioGroupItemProps, RadioGroupItemText, type RadioGroupItemTextBaseProps, type RadioGroupItemTextProps, RadioGroupLabel, type RadioGroupLabelBaseProps, type RadioGroupLabelProps, RadioGroupRoot, type RadioGroupRootBaseProps, type RadioGroupRootProps, RadioGroupRootProvider, type RadioGroupRootProviderBaseProps, type RadioGroupRootProviderProps, type UseRadioGroupContext, type UseRadioGroupItemContext, type UseRadioGroupProps, type UseRadioGroupReturn, useRadioGroup, useRadioGroupContext, useRadioGroupItemContext };
