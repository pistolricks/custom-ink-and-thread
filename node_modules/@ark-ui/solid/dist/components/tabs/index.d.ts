import * as tabs$1 from '@zag-js/tabs';
import { ContentProps, TriggerProps, FocusChangeDetails, ValueChangeDetails } from '@zag-js/tabs';
export { FocusChangeDetails as TabsFocusChangeDetails, ValueChangeDetails as TabsValueChangeDetails, anatomy as tabsAnatomy } from '@zag-js/tabs';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PolymorphicProps, HTMLProps } from '../factory.js';
import { A as Assign, O as Optional } from '../../types-B277wCdv.js';
import { PropTypes } from '@zag-js/solid';
import { R as RenderStrategyProps } from '../../render-strategy-B5MqQP3X.js';

interface TabContentBaseProps extends ContentProps, PolymorphicProps<'div'> {
}
interface TabContentProps extends HTMLProps<'div'>, TabContentBaseProps {
}
declare const TabContent: (props: TabContentProps) => solid_js.JSX.Element;

interface TabIndicatorBaseProps extends PolymorphicProps<'div'> {
}
interface TabIndicatorProps extends HTMLProps<'div'>, TabIndicatorBaseProps {
}
declare const TabIndicator: (props: TabIndicatorProps) => solid_js.JSX.Element;

interface TabListBaseProps extends PolymorphicProps<'div'> {
}
interface TabListProps extends HTMLProps<'div'>, TabListBaseProps {
}
declare const TabList: (props: TabListProps) => solid_js.JSX.Element;

interface TabTriggerBaseProps extends TriggerProps, PolymorphicProps<'button'> {
}
interface TabTriggerProps extends Assign<HTMLProps<'button'>, TabTriggerBaseProps> {
}
declare const TabTrigger: (props: TabTriggerProps) => solid_js.JSX.Element;

interface UseTabsProps extends Optional<Omit<tabs$1.Context, 'dir' | 'getRootNode'>, 'id'> {
    /**
     * The initial value of the tabs when it is first rendered.
     * Use when you do not need to control the state of the tabs.
     */
    defaultValue?: tabs$1.Context['value'];
}
interface UseTabsReturn extends Accessor<tabs$1.Api<PropTypes>> {
}
declare const useTabs: (props?: UseTabsProps) => UseTabsReturn;

interface UseTabsContext extends UseTabsReturn {
}
declare const useTabsContext: () => UseTabsContext;

interface TabsContextProps {
    children: (context: UseTabsContext) => JSX.Element;
}
declare const TabsContext: (props: TabsContextProps) => JSX.Element;

interface TabsRootBaseProps extends UseTabsProps, RenderStrategyProps, PolymorphicProps<'div'> {
}
interface TabsRootProps extends HTMLProps<'div'>, TabsRootBaseProps {
}
declare const TabsRoot: (props: TabsRootProps) => solid_js.JSX.Element;

interface RootProviderProps {
    value: UseTabsReturn;
}
interface TabsRootProviderBaseProps extends RootProviderProps, RenderStrategyProps, PolymorphicProps<'div'> {
}
interface TabsRootProviderProps extends HTMLProps<'div'>, TabsRootProviderBaseProps {
}
declare const TabsRootProvider: (props: TabsRootProviderProps) => solid_js.JSX.Element;

declare const tabs_FocusChangeDetails: typeof FocusChangeDetails;
declare const tabs_ValueChangeDetails: typeof ValueChangeDetails;
declare namespace tabs {
  export { TabContent as Content, type TabContentBaseProps as ContentBaseProps, type TabContentProps as ContentProps, TabsContext as Context, type TabsContextProps as ContextProps, tabs_FocusChangeDetails as FocusChangeDetails, TabIndicator as Indicator, type TabIndicatorBaseProps as IndicatorBaseProps, type TabIndicatorProps as IndicatorProps, TabList as List, type TabListBaseProps as ListBaseProps, type TabListProps as ListProps, TabsRoot as Root, type TabsRootBaseProps as RootBaseProps, type TabsRootProps as RootProps, TabsRootProvider as RootProvider, type TabsRootProviderBaseProps as RootProviderBaseProps, type TabsRootProviderProps as RootProviderProps, TabTrigger as Trigger, type TabTriggerBaseProps as TriggerBaseProps, type TabTriggerProps as TriggerProps, tabs_ValueChangeDetails as ValueChangeDetails };
}

export { TabContent, type TabContentBaseProps, type TabContentProps, TabIndicator, type TabIndicatorBaseProps, type TabIndicatorProps, TabList, type TabListBaseProps, type TabListProps, TabTrigger, type TabTriggerBaseProps, type TabTriggerProps, tabs as Tabs, TabsContext, type TabsContextProps, TabsRoot, type TabsRootBaseProps, type TabsRootProps, TabsRootProvider, type TabsRootProviderBaseProps, type TabsRootProviderProps, type UseTabsContext, type UseTabsProps, type UseTabsReturn, useTabs, useTabsContext };
