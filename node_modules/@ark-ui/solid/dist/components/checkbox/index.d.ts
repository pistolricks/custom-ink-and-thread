import * as checkbox$1 from '@zag-js/checkbox';
import { CheckedChangeDetails, CheckedState } from '@zag-js/checkbox';
export { CheckedChangeDetails as CheckboxCheckedChangeDetails, CheckedState as CheckboxCheckedState } from '@zag-js/checkbox';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PropTypes } from '@zag-js/solid';
import { O as Optional } from '../../types-B277wCdv.js';
import { PolymorphicProps, HTMLProps } from '../factory.js';
import * as _zag_js_anatomy from '@zag-js/anatomy';

interface UseCheckboxProps extends Optional<Omit<checkbox$1.Context, 'dir' | 'getRootNode'>, 'id'> {
    /**
     * The checked state of the checkbox when it is first rendered.
     * Use this when you do not need to control the state of the checkbox.
     */
    defaultChecked?: checkbox$1.Context['checked'];
}
interface UseCheckboxReturn extends Accessor<checkbox$1.Api<PropTypes>> {
}
declare const useCheckbox: (ownProps?: UseCheckboxProps) => UseCheckboxReturn;

interface UseCheckboxContext extends UseCheckboxReturn {
}
declare const useCheckboxContext: () => UseCheckboxContext;

interface CheckboxContextProps {
    children: (context: UseCheckboxContext) => JSX.Element;
}
declare const CheckboxContext: (props: CheckboxContextProps) => JSX.Element;

interface CheckboxControlBaseProps extends PolymorphicProps<'div'> {
}
interface CheckboxControlProps extends HTMLProps<'div'>, CheckboxControlBaseProps {
}
declare const CheckboxControl: (props: CheckboxControlProps) => solid_js.JSX.Element;

interface UseCheckboxGroupProps {
    /**
     * The initial value of `value` when uncontrolled
     */
    defaultValue?: Accessor<string[]> | string[];
    /**
     * The controlled value of the checkbox group
     */
    value?: Accessor<string[]>;
    /**
     * The name of the input fields in the checkbox group
     * (Useful for form submission).
     */
    name?: string;
    /**
     * The callback to call when the value changes
     */
    onValueChange?: (value: string[]) => void;
    /**
     * If `true`, the checkbox group is disabled
     */
    disabled?: boolean;
    /**
     * If `true`, the checkbox group is read-only
     */
    readOnly?: boolean;
    /**
     * If `true`, the checkbox group is invalid
     */
    invalid?: boolean;
}
interface CheckboxGroupItemProps {
    value: string | undefined;
}
declare function useCheckboxGroup(props?: UseCheckboxGroupProps): Accessor<{
    isChecked: (val: string | undefined) => boolean;
    value: Accessor<string[]>;
    name: string | undefined;
    disabled: boolean | undefined;
    readOnly: boolean | undefined;
    invalid: boolean | undefined;
    setValue: (next: string[] | ((prev: string[]) => string[])) => void;
    addValue: (val: string) => void;
    toggleValue: (val: string) => void;
    getItemProps: (itemProps: CheckboxGroupItemProps) => {
        checked: boolean | undefined;
        onCheckedChange(): void;
        name: string | undefined;
        disabled: boolean | undefined;
        readOnly: boolean | undefined;
        invalid: boolean | undefined;
    };
}>;
type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>;

interface CheckboxGroupBaseProps extends UseCheckboxGroupProps, PolymorphicProps<'div'> {
}
interface CheckboxGroupProps extends HTMLProps<'div'>, CheckboxGroupBaseProps {
}
declare const CheckboxGroup: (props: CheckboxGroupProps) => solid_js.JSX.Element;

interface CheckboxHiddenInputBaseProps extends PolymorphicProps<'input'> {
}
interface CheckboxHiddenInputProps extends HTMLProps<'input'>, CheckboxHiddenInputBaseProps {
}
declare const CheckboxHiddenInput: (props: CheckboxHiddenInputProps) => solid_js.JSX.Element;

interface IndicatorProps {
    indeterminate?: boolean;
}
interface CheckboxIndicatorBaseProps extends IndicatorProps, PolymorphicProps<'div'> {
}
interface CheckboxIndicatorProps extends HTMLProps<'div'>, CheckboxIndicatorBaseProps {
}
declare const CheckboxIndicator: (props: CheckboxIndicatorProps) => solid_js.JSX.Element;

interface CheckboxLabelBaseProps extends PolymorphicProps<'span'> {
}
interface CheckboxLabelProps extends HTMLProps<'span'>, CheckboxLabelBaseProps {
}
declare const CheckboxLabel: (props: CheckboxLabelProps) => solid_js.JSX.Element;

interface CheckboxRootBaseProps extends UseCheckboxProps, PolymorphicProps<'label'> {
}
interface CheckboxRootProps extends HTMLProps<'label'>, CheckboxRootBaseProps {
}
declare const CheckboxRoot: (props: CheckboxRootProps) => solid_js.JSX.Element;

interface RootProviderProps {
    value: UseCheckboxReturn;
}
interface CheckboxRootProviderBaseProps extends PolymorphicProps<'label'> {
}
interface CheckboxRootProviderProps extends HTMLProps<'label'>, RootProviderProps, CheckboxRootProviderBaseProps {
}
declare const CheckboxRootProvider: (props: CheckboxRootProviderProps) => solid_js.JSX.Element;

declare const checkboxAnatomy: _zag_js_anatomy.AnatomyInstance<"label" | "group" | "root" | "control" | "indicator">;

interface UseCheckboxGroupContext extends UseCheckboxGroupReturn {
}
declare const useCheckboxGroupContext: () => UseCheckboxGroupContext | undefined;

declare const checkbox_CheckedChangeDetails: typeof CheckedChangeDetails;
declare const checkbox_CheckedState: typeof CheckedState;
declare namespace checkbox {
  export { checkbox_CheckedChangeDetails as CheckedChangeDetails, checkbox_CheckedState as CheckedState, CheckboxContext as Context, type CheckboxContextProps as ContextProps, CheckboxControl as Control, type CheckboxControlBaseProps as ControlBaseProps, type CheckboxControlProps as ControlProps, CheckboxGroup as Group, type CheckboxGroupBaseProps as GroupBaseProps, type CheckboxGroupProps as GroupProps, CheckboxHiddenInput as HiddenInput, type CheckboxHiddenInputBaseProps as HiddenInputBaseProps, type CheckboxHiddenInputProps as HiddenInputProps, CheckboxIndicator as Indicator, type CheckboxIndicatorBaseProps as IndicatorBaseProps, type CheckboxIndicatorProps as IndicatorProps, CheckboxLabel as Label, type CheckboxLabelBaseProps as LabelBaseProps, type CheckboxLabelProps as LabelProps, CheckboxRoot as Root, type CheckboxRootBaseProps as RootBaseProps, type CheckboxRootProps as RootProps, CheckboxRootProvider as RootProvider, type CheckboxRootProviderBaseProps as RootProviderBaseProps, type CheckboxRootProviderProps as RootProviderProps };
}

export { checkbox as Checkbox, CheckboxContext, type CheckboxContextProps, CheckboxControl, type CheckboxControlBaseProps, type CheckboxControlProps, CheckboxGroup, type CheckboxGroupBaseProps, type CheckboxGroupProps, CheckboxHiddenInput, type CheckboxHiddenInputBaseProps, type CheckboxHiddenInputProps, CheckboxIndicator, type CheckboxIndicatorBaseProps, type CheckboxIndicatorProps, CheckboxLabel, type CheckboxLabelBaseProps, type CheckboxLabelProps, CheckboxRoot, type CheckboxRootBaseProps, type CheckboxRootProps, CheckboxRootProvider, type CheckboxRootProviderBaseProps, type CheckboxRootProviderProps, type UseCheckboxContext, type UseCheckboxGroupContext, type UseCheckboxGroupProps, type UseCheckboxGroupReturn, type UseCheckboxProps, type UseCheckboxReturn, checkboxAnatomy, useCheckbox, useCheckboxContext, useCheckboxGroup, useCheckboxGroupContext };
