import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PolymorphicProps, HTMLProps } from '../factory.js';
import * as progress$1 from '@zag-js/progress';
import { ViewProps } from '@zag-js/progress';
export { anatomy as progressAnatomy } from '@zag-js/progress';
import { PropTypes } from '@zag-js/solid';
import { O as Optional } from '../../types-B277wCdv.js';

interface ProgressCircleBaseProps extends PolymorphicProps<'svg'> {
}
interface ProgressCircleProps extends HTMLProps<'svg'>, ProgressCircleBaseProps {
}
declare const ProgressCircle: (props: ProgressCircleProps) => solid_js.JSX.Element;

interface ProgressCircleRangeBaseProps extends PolymorphicProps<'circle'> {
}
interface ProgressCircleRangeProps extends HTMLProps<'circle'>, ProgressCircleRangeBaseProps {
}
declare const ProgressCircleRange: (props: ProgressCircleRangeProps) => solid_js.JSX.Element;

interface ProgressCircleTrackBaseProps extends PolymorphicProps<'circle'> {
}
interface ProgressCircleTrackProps extends HTMLProps<'circle'>, ProgressCircleTrackBaseProps {
}
declare const ProgressCircleTrack: (props: ProgressCircleTrackProps) => solid_js.JSX.Element;

interface UseProgressProps extends Optional<Omit<progress$1.Context, 'dir' | 'getRootNode'>, 'id'> {
    /**
     * The initial value of the progress when it is first rendered.
     * Use when you do not need to control the state of the progress.
     */
    defaultValue?: progress$1.Context['value'];
}
interface UseProgressReturn extends Accessor<progress$1.Api<PropTypes>> {
}
declare const useProgress: (props?: UseProgressProps) => UseProgressReturn;

interface UseProgressContext extends UseProgressReturn {
}
declare const useProgressContext: () => UseProgressContext;

interface ProgressContextProps {
    children: (context: UseProgressContext) => JSX.Element;
}
declare const ProgressContext: (props: ProgressContextProps) => JSX.Element;

interface ProgressLabelBaseProps extends PolymorphicProps<'label'> {
}
interface ProgressLabelProps extends HTMLProps<'label'>, ProgressLabelBaseProps {
}
declare const ProgressLabel: (props: ProgressLabelProps) => solid_js.JSX.Element;

interface ProgressRangeBaseProps extends PolymorphicProps<'div'> {
}
interface ProgressRangeProps extends HTMLProps<'div'>, ProgressRangeBaseProps {
}
declare const ProgressRange: (props: ProgressRangeProps) => solid_js.JSX.Element;

interface ProgressRootBaseProps extends UseProgressProps, PolymorphicProps<'div'> {
}
interface ProgressRootProps extends HTMLProps<'div'>, ProgressRootBaseProps {
}
declare const ProgressRoot: (props: ProgressRootProps) => solid_js.JSX.Element;

interface RootProviderProps {
    value: UseProgressReturn;
}
interface ProgressRootProviderBaseProps extends PolymorphicProps<'div'> {
}
interface ProgressRootProviderProps extends HTMLProps<'div'>, RootProviderProps, ProgressRootProviderBaseProps {
}
declare const ProgressRootProvider: (props: ProgressRootProviderProps) => solid_js.JSX.Element;

interface ProgressTrackBaseProps extends PolymorphicProps<'div'> {
}
interface ProgressTrackProps extends HTMLProps<'div'>, ProgressTrackBaseProps {
}
declare const ProgressTrack: (props: ProgressTrackProps) => solid_js.JSX.Element;

interface ProgressValueTextBaseProps extends PolymorphicProps<'span'> {
}
interface ProgressValueTextProps extends HTMLProps<'span'>, ProgressValueTextBaseProps {
}
declare const ProgressValueText: (props: ProgressValueTextProps) => solid_js.JSX.Element;

interface ProgressViewBaseProps extends ViewProps, PolymorphicProps<'span'> {
}
interface ProgressViewProps extends HTMLProps<'span'>, ProgressViewBaseProps {
}
declare const ProgressView: (props: ProgressViewProps) => solid_js.JSX.Element;

declare namespace progress {
  export { ProgressCircle as Circle, type ProgressCircleBaseProps as CircleBaseProps, type ProgressCircleProps as CircleProps, ProgressCircleRange as CircleRange, type ProgressCircleRangeBaseProps as CircleRangeBaseProps, type ProgressCircleRangeProps as CircleRangeProps, ProgressCircleTrack as CircleTrack, type ProgressCircleTrackBaseProps as CircleTrackBaseProps, type ProgressCircleTrackProps as CircleTrackProps, ProgressContext as Context, type ProgressContextProps as ContextProps, ProgressLabel as Label, type ProgressLabelBaseProps as LabelBaseProps, type ProgressLabelProps as LabelProps, ProgressRange as Range, type ProgressRangeBaseProps as RangeBaseProps, type ProgressRangeProps as RangeProps, ProgressRoot as Root, type ProgressRootBaseProps as RootBaseProps, type ProgressRootProps as RootProps, ProgressRootProvider as RootProvider, type ProgressRootProviderBaseProps as RootProviderBaseProps, type ProgressRootProviderProps as RootProviderProps, ProgressTrack as Track, type ProgressTrackBaseProps as TrackBaseProps, type ProgressTrackProps as TrackProps, ProgressValueText as ValueText, type ProgressValueTextBaseProps as ValueTextBaseProps, type ProgressValueTextProps as ValueTextProps, ProgressView as View, type ProgressViewBaseProps as ViewBaseProps, type ProgressViewProps as ViewProps };
}

export { progress as Progress, ProgressCircle, type ProgressCircleBaseProps, type ProgressCircleProps, ProgressCircleRange, type ProgressCircleRangeBaseProps, type ProgressCircleRangeProps, ProgressCircleTrack, type ProgressCircleTrackBaseProps, type ProgressCircleTrackProps, ProgressContext, type ProgressContextProps, ProgressLabel, type ProgressLabelBaseProps, type ProgressLabelProps, ProgressRange, type ProgressRangeBaseProps, type ProgressRangeProps, ProgressRoot, type ProgressRootBaseProps, type ProgressRootProps, ProgressRootProvider, type ProgressRootProviderBaseProps, type ProgressRootProviderProps, ProgressTrack, type ProgressTrackBaseProps, type ProgressTrackProps, ProgressValueText, type ProgressValueTextBaseProps, type ProgressValueTextProps, ProgressView, type ProgressViewBaseProps, type ProgressViewProps, type UseProgressContext, type UseProgressProps, type UseProgressReturn, useProgress, useProgressContext };
