import * as clipboard$1 from '@zag-js/clipboard';
import { CopyStatusDetails } from '@zag-js/clipboard';
export { CopyStatusDetails as ClipboardCopyStatusDetails, anatomy as clipboardAnatomy } from '@zag-js/clipboard';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PropTypes } from '@zag-js/solid';
import { O as Optional } from '../../types-B277wCdv.js';
import { PolymorphicProps, HTMLProps } from '../factory.js';

interface UseClipboardProps extends Optional<Omit<clipboard$1.Context, 'dir' | 'getRootNode'>, 'id'> {
}
interface UseClipboardReturn extends Accessor<clipboard$1.Api<PropTypes>> {
}
declare const useClipboard: (props?: UseClipboardProps) => UseClipboardReturn;

interface UseClipboardContext extends UseClipboardReturn {
}
declare const useClipboardContext: () => UseClipboardContext;

interface ClipboardContextProps {
    children: (context: UseClipboardContext) => JSX.Element;
}
declare const ClipboardContext: (props: ClipboardContextProps) => JSX.Element;

interface ClipboardControlBaseProps extends PolymorphicProps<'div'> {
}
interface ClipboardControlProps extends HTMLProps<'div'>, ClipboardControlBaseProps {
}
declare const ClipboardControl: (props: ClipboardControlProps) => solid_js.JSX.Element;

interface IndicatorProps {
    copied?: JSX.Element;
}
interface ClipboardIndicatorBaseProps extends IndicatorProps, PolymorphicProps<'div'> {
}
interface ClipboardIndicatorProps extends HTMLProps<'div'>, ClipboardIndicatorBaseProps {
}
declare const ClipboardIndicator: (props: ClipboardIndicatorProps) => JSX.Element;

interface ClipboardInputBaseProps extends PolymorphicProps<'input'> {
}
interface ClipboardInputProps extends HTMLProps<'input'>, ClipboardInputBaseProps {
}
declare const ClipboardInput: (props: ClipboardInputProps) => solid_js.JSX.Element;

interface ClipboardLabelBaseProps extends PolymorphicProps<'label'> {
}
interface ClipboardLabelProps extends HTMLProps<'label'>, ClipboardLabelBaseProps {
}
declare const ClipboardLabel: (props: ClipboardLabelProps) => solid_js.JSX.Element;

interface ClipboardRootBaseProps extends UseClipboardProps, PolymorphicProps<'div'> {
}
interface ClipboardRootProps extends HTMLProps<'div'>, ClipboardRootBaseProps {
}
declare const ClipboardRoot: (props: ClipboardRootProps) => solid_js.JSX.Element;

interface RootProviderProps {
    value: UseClipboardReturn;
}
interface ClipboardRootProviderBaseProps extends PolymorphicProps<'div'> {
}
interface ClipboardRootProviderProps extends HTMLProps<'div'>, RootProviderProps, ClipboardRootProviderBaseProps {
}
declare const ClipboardRootProvider: (props: ClipboardRootProviderProps) => solid_js.JSX.Element;

interface ClipboardTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface ClipboardTriggerProps extends HTMLProps<'button'>, ClipboardTriggerBaseProps {
}
declare const ClipboardTrigger: (props: ClipboardTriggerProps) => solid_js.JSX.Element;

interface ClipboardValueTextBaseProps extends PolymorphicProps<'span'> {
}
interface ClipboardValueTextProps extends HTMLProps<'span'>, ClipboardValueTextBaseProps {
}
declare const ClipboardValueText: (props: ClipboardValueTextProps) => solid_js.JSX.Element;

declare const clipboard_CopyStatusDetails: typeof CopyStatusDetails;
declare namespace clipboard {
  export { ClipboardContext as Context, type ClipboardContextProps as ContextProps, ClipboardControl as Control, type ClipboardControlBaseProps as ControlBaseProps, type ClipboardControlProps as ControlProps, clipboard_CopyStatusDetails as CopyStatusDetails, ClipboardIndicator as Indicator, type ClipboardIndicatorBaseProps as IndicatorBaseProps, type ClipboardIndicatorProps as IndicatorProps, ClipboardInput as Input, type ClipboardInputBaseProps as InputBaseProps, type ClipboardInputProps as InputProps, ClipboardLabel as Label, type ClipboardLabelBaseProps as LabelBaseProps, type ClipboardLabelProps as LabelProps, ClipboardRoot as Root, type ClipboardRootBaseProps as RootBaseProps, type ClipboardRootProps as RootProps, ClipboardRootProvider as RootProvider, type ClipboardRootProviderBaseProps as RootProviderBaseProps, type ClipboardRootProviderProps as RootProviderProps, ClipboardTrigger as Trigger, type ClipboardTriggerBaseProps as TriggerBaseProps, type ClipboardTriggerProps as TriggerProps, ClipboardValueText as ValueText, type ClipboardValueTextBaseProps as ValueTextBaseProps, type ClipboardValueTextProps as ValueTextProps };
}

export { clipboard as Clipboard, ClipboardContext, type ClipboardContextProps, ClipboardControl, type ClipboardControlBaseProps, type ClipboardControlProps, ClipboardIndicator, type ClipboardIndicatorBaseProps, type ClipboardIndicatorProps, ClipboardInput, type ClipboardInputBaseProps, type ClipboardInputProps, ClipboardLabel, type ClipboardLabelBaseProps, type ClipboardLabelProps, ClipboardRoot, type ClipboardRootBaseProps, type ClipboardRootProps, ClipboardRootProvider, type ClipboardRootProviderBaseProps, type ClipboardRootProviderProps, ClipboardTrigger, type ClipboardTriggerBaseProps, type ClipboardTriggerProps, ClipboardValueText, type ClipboardValueTextBaseProps, type ClipboardValueTextProps, type UseClipboardContext, type UseClipboardProps, type UseClipboardReturn, useClipboard, useClipboardContext };
