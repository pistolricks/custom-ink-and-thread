import * as accordion$1 from '@zag-js/accordion';
import { ItemProps, ItemState, FocusChangeDetails, ValueChangeDetails } from '@zag-js/accordion';
export { FocusChangeDetails as AccordionFocusChangeDetails, ValueChangeDetails as AccordionValueChangeDetails, anatomy as accordionAnatomy } from '@zag-js/accordion';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PropTypes } from '@zag-js/solid';
import { O as Optional } from '../../types-B277wCdv.js';
import { PolymorphicProps, HTMLProps } from '../factory.js';
import { R as RenderStrategyProps } from '../../render-strategy-B5MqQP3X.js';

interface UseAccordionProps extends Optional<Omit<accordion$1.Context, 'dir' | 'getRootNode'>, 'id'> {
    /**
     * The initial value of the accordion when it is first rendered.
     * Use when you do not need to control the state of the color picker.
     */
    defaultValue?: accordion$1.Context['value'];
}
interface UseAccordionReturn extends Accessor<accordion$1.Api<PropTypes>> {
}
declare const useAccordion: (props?: UseAccordionProps) => UseAccordionReturn;

interface UseAccordionContext extends UseAccordionReturn {
}
declare const useAccordionContext: () => UseAccordionContext;

interface AccordionContextProps {
    children: (context: UseAccordionContext) => JSX.Element;
}
declare const AccordionContext: (props: AccordionContextProps) => JSX.Element;

interface AccordionItemBaseProps extends ItemProps, PolymorphicProps<'div'> {
}
interface AccordionItemProps extends HTMLProps<'div'>, AccordionItemBaseProps {
}
declare const AccordionItem: (props: AccordionItemProps) => solid_js.JSX.Element;

interface AccordionItemContentBaseProps extends PolymorphicProps<'div'> {
}
interface AccordionItemContentProps extends HTMLProps<'div'>, AccordionItemContentBaseProps {
}
declare const AccordionItemContent: (props: AccordionItemContentProps) => solid_js.JSX.Element;

interface UseAccordionItemContext extends Accessor<ItemState> {
}
declare const useAccordionItemContext: () => UseAccordionItemContext;

interface AccordionItemContextProps {
    children: (context: UseAccordionItemContext) => JSX.Element;
}
declare const AccordionItemContext: (props: AccordionItemContextProps) => JSX.Element;

interface AccordionItemIndicatorBaseProps extends PolymorphicProps<'div'> {
}
interface AccordionItemIndicatorProps extends HTMLProps<'div'>, AccordionItemIndicatorBaseProps {
}
declare const AccordionItemIndicator: (props: AccordionItemIndicatorProps) => solid_js.JSX.Element;

interface AccordionItemTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface AccordionItemTriggerProps extends HTMLProps<'button'>, AccordionItemTriggerBaseProps {
}
declare const AccordionItemTrigger: (props: AccordionItemTriggerProps) => solid_js.JSX.Element;

interface AccordionRootBaseProps extends UseAccordionProps, RenderStrategyProps, PolymorphicProps<'div'> {
}
interface AccordionRootProps extends HTMLProps<'div'>, AccordionRootBaseProps {
}
declare const AccordionRoot: (props: AccordionRootProps) => solid_js.JSX.Element;

interface RootProviderProps {
    value: UseAccordionReturn;
}
interface AccordionRootProviderBaseProps extends RootProviderProps, RenderStrategyProps, PolymorphicProps<'div'> {
}
interface AccordionRootProviderProps extends HTMLProps<'div'>, AccordionRootProviderBaseProps {
}
declare const AccordionRootProvider: (props: AccordionRootProviderProps) => solid_js.JSX.Element;

declare const accordion_FocusChangeDetails: typeof FocusChangeDetails;
declare const accordion_ValueChangeDetails: typeof ValueChangeDetails;
declare namespace accordion {
  export { AccordionContext as Context, type AccordionContextProps as ContextProps, accordion_FocusChangeDetails as FocusChangeDetails, AccordionItem as Item, type AccordionItemBaseProps as ItemBaseProps, AccordionItemContent as ItemContent, type AccordionItemContentBaseProps as ItemContentBaseProps, type AccordionItemContentProps as ItemContentProps, AccordionItemContext as ItemContext, type AccordionItemContextProps as ItemContextProps, AccordionItemIndicator as ItemIndicator, type AccordionItemIndicatorBaseProps as ItemIndicatorBaseProps, type AccordionItemIndicatorProps as ItemIndicatorProps, type AccordionItemProps as ItemProps, AccordionItemTrigger as ItemTrigger, type AccordionItemTriggerBaseProps as ItemTriggerBaseProps, type AccordionItemTriggerProps as ItemTriggerProps, AccordionRoot as Root, type AccordionRootBaseProps as RootBaseProps, type AccordionRootProps as RootProps, AccordionRootProvider as RootProvider, type AccordionRootProviderBaseProps as RootProviderBaseProps, type AccordionRootProviderProps as RootProviderProps, accordion_ValueChangeDetails as ValueChangeDetails };
}

export { accordion as Accordion, AccordionContext, type AccordionContextProps, AccordionItem, type AccordionItemBaseProps, AccordionItemContent, type AccordionItemContentBaseProps, type AccordionItemContentProps, AccordionItemContext, type AccordionItemContextProps, AccordionItemIndicator, type AccordionItemIndicatorBaseProps, type AccordionItemIndicatorProps, type AccordionItemProps, AccordionItemTrigger, type AccordionItemTriggerBaseProps, type AccordionItemTriggerProps, AccordionRoot, type AccordionRootBaseProps, type AccordionRootProps, AccordionRootProvider, type AccordionRootProviderBaseProps, type AccordionRootProviderProps, type UseAccordionContext, type UseAccordionItemContext, type UseAccordionProps, type UseAccordionReturn, useAccordion, useAccordionContext, useAccordionItemContext };
