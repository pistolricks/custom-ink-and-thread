import * as dialog$1 from '@zag-js/dialog';
import { OpenChangeDetails } from '@zag-js/dialog';
export { OpenChangeDetails as DialogOpenChangeDetails, anatomy as dialogAnatomy } from '@zag-js/dialog';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PolymorphicProps, HTMLProps } from '../factory.js';
import { PropTypes } from '@zag-js/solid';
import { O as Optional } from '../../types-B277wCdv.js';
import { U as UsePresenceProps } from '../../use-presence-Ct1onT3-.js';
import '@zag-js/presence';
import '../../render-strategy-B5MqQP3X.js';

interface DialogBackdropBaseProps extends PolymorphicProps<'div'> {
}
interface DialogBackdropProps extends HTMLProps<'div'>, DialogBackdropBaseProps {
}
declare const DialogBackdrop: (props: DialogBackdropProps) => solid_js.JSX.Element;

interface DialogCloseTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface DialogCloseTriggerProps extends HTMLProps<'button'>, DialogCloseTriggerBaseProps {
}
declare const DialogCloseTrigger: (props: DialogCloseTriggerProps) => solid_js.JSX.Element;

interface DialogContentBaseProps extends PolymorphicProps<'div'> {
}
interface DialogContentProps extends HTMLProps<'div'>, DialogContentBaseProps {
}
declare const DialogContent: (props: DialogContentProps) => solid_js.JSX.Element;

interface UseDialogProps extends Optional<Omit<dialog$1.Context, 'dir' | 'getRootNode' | 'open.controlled'>, 'id'> {
    /**
     * The initial open state of the dialog when it is first rendered.
     * Use when you do not need to control its open state.
     */
    defaultOpen?: dialog$1.Context['open'];
}
interface UseDialogReturn extends Accessor<dialog$1.Api<PropTypes>> {
}
declare const useDialog: (props?: UseDialogProps) => UseDialogReturn;

interface UseDialogContext extends UseDialogReturn {
}
declare const useDialogContext: () => UseDialogContext;

interface DialogContextProps {
    children: (context: UseDialogContext) => JSX.Element;
}
declare const DialogContext: (props: DialogContextProps) => JSX.Element;

interface DialogDescriptionBaseProps extends PolymorphicProps<'div'> {
}
interface DialogDescriptionProps extends HTMLProps<'div'>, DialogDescriptionBaseProps {
}
declare const DialogDescription: (props: DialogDescriptionProps) => solid_js.JSX.Element;

interface DialogPositionerBaseProps extends PolymorphicProps<'div'> {
}
interface DialogPositionerProps extends HTMLProps<'div'>, DialogPositionerBaseProps {
}
declare const DialogPositioner: (props: DialogPositionerProps) => solid_js.JSX.Element;

interface DialogRootBaseProps extends UseDialogProps, UsePresenceProps {
}
interface DialogRootProps extends DialogRootBaseProps {
    children?: JSX.Element;
}
declare const DialogRoot: (props: DialogRootProps) => JSX.Element;

interface RootProviderProps {
    value: UseDialogReturn;
}
interface DialogRootProviderBaseProps extends RootProviderProps, UsePresenceProps {
}
interface DialogRootProviderProps extends DialogRootProviderBaseProps {
    children?: JSX.Element;
}
declare const DialogRootProvider: (props: DialogRootProviderProps) => JSX.Element;

interface DialogTitleBaseProps extends PolymorphicProps<'h2'> {
}
interface DialogTitleProps extends HTMLProps<'h2'>, DialogTitleBaseProps {
}
declare const DialogTitle: (props: DialogTitleProps) => solid_js.JSX.Element;

interface DialogTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface DialogTriggerProps extends HTMLProps<'button'>, DialogTriggerBaseProps {
}
declare const DialogTrigger: (props: DialogTriggerProps) => solid_js.JSX.Element;

declare const dialog_OpenChangeDetails: typeof OpenChangeDetails;
declare namespace dialog {
  export { DialogBackdrop as Backdrop, type DialogBackdropBaseProps as BackdropBaseProps, type DialogBackdropProps as BackdropProps, DialogCloseTrigger as CloseTrigger, type DialogCloseTriggerBaseProps as CloseTriggerBaseProps, type DialogCloseTriggerProps as CloseTriggerProps, DialogContent as Content, type DialogContentBaseProps as ContentBaseProps, type DialogContentProps as ContentProps, DialogContext as Context, type DialogContextProps as ContextProps, DialogDescription as Description, type DialogDescriptionBaseProps as DescriptionBaseProps, type DialogDescriptionProps as DescriptionProps, dialog_OpenChangeDetails as OpenChangeDetails, DialogPositioner as Positioner, type DialogPositionerBaseProps as PositionerBaseProps, type DialogPositionerProps as PositionerProps, DialogRoot as Root, type DialogRootBaseProps as RootBaseProps, type DialogRootProps as RootProps, DialogRootProvider as RootProvider, type DialogRootProviderBaseProps as RootProviderBaseProps, type DialogRootProviderProps as RootProviderProps, DialogTitle as Title, type DialogTitleBaseProps as TitleBaseProps, type DialogTitleProps as TitleProps, DialogTrigger as Trigger, type DialogTriggerBaseProps as TriggerBaseProps, type DialogTriggerProps as TriggerProps };
}

export { dialog as Dialog, DialogBackdrop, type DialogBackdropBaseProps, type DialogBackdropProps, DialogCloseTrigger, type DialogCloseTriggerBaseProps, type DialogCloseTriggerProps, DialogContent, type DialogContentBaseProps, type DialogContentProps, DialogContext, type DialogContextProps, DialogDescription, type DialogDescriptionBaseProps, type DialogDescriptionProps, DialogPositioner, type DialogPositionerBaseProps, type DialogPositionerProps, DialogRoot, type DialogRootBaseProps, type DialogRootProps, DialogRootProvider, type DialogRootProviderBaseProps, type DialogRootProviderProps, DialogTitle, type DialogTitleBaseProps, type DialogTitleProps, DialogTrigger, type DialogTriggerBaseProps, type DialogTriggerProps, type UseDialogContext, type UseDialogProps, type UseDialogReturn, useDialog, useDialogContext };
