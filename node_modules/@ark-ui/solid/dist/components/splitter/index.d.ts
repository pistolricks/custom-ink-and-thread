import * as splitter$1 from '@zag-js/splitter';
import { PanelProps, ResizeTriggerProps, SizeChangeDetails } from '@zag-js/splitter';
export { SizeChangeDetails as SplitterSizeChangeDetails, anatomy as splitterAnatomy } from '@zag-js/splitter';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PropTypes } from '@zag-js/solid';
import { O as Optional, A as Assign } from '../../types-B277wCdv.js';
import { PolymorphicProps, HTMLProps } from '../factory.js';

interface UseSplitterProps extends Optional<Omit<splitter$1.Context, 'dir' | 'getRootNode'>, 'id'> {
    /**
     * The initial size of the panels when it is first rendered.
     * Use this when you do not need to control the state of the carousel.
     */
    defaultSize?: splitter$1.Context['size'];
}
interface UseSplitterReturn extends Accessor<splitter$1.Api<PropTypes>> {
}
declare const useSplitter: (props?: UseSplitterProps) => UseSplitterReturn;

interface UseSplitterContext extends UseSplitterReturn {
}
declare const useSplitterContext: () => UseSplitterContext;

interface SplitterContextProps {
    children: (context: UseSplitterContext) => JSX.Element;
}
declare const SplitterContext: (props: SplitterContextProps) => JSX.Element;

interface SplitterPanelBaseProps extends PanelProps, PolymorphicProps<'div'> {
}
interface SplitterPanelProps extends Assign<HTMLProps<'div'>, SplitterPanelBaseProps> {
}
declare const SplitterPanel: (props: SplitterPanelProps) => solid_js.JSX.Element;

interface SplitterResizeTriggerBaseProps extends ResizeTriggerProps, PolymorphicProps<'button'> {
}
interface SplitterResizeTriggerProps extends Assign<HTMLProps<'button'>, SplitterResizeTriggerBaseProps> {
}
declare const SplitterResizeTrigger: (props: SplitterResizeTriggerProps) => solid_js.JSX.Element;

interface SplitterRootBaseProps extends UseSplitterProps, PolymorphicProps<'div'> {
}
interface SplitterRootProps extends HTMLProps<'div'>, SplitterRootBaseProps {
}
declare const SplitterRoot: (props: SplitterRootProps) => solid_js.JSX.Element;

interface RootProviderProps {
    value: UseSplitterReturn;
}
interface SplitterRootProviderBaseProps extends PolymorphicProps<'div'> {
}
interface SplitterRootProviderProps extends HTMLProps<'div'>, RootProviderProps, SplitterRootProviderBaseProps {
}
declare const SplitterRootProvider: (props: SplitterRootProviderProps) => solid_js.JSX.Element;

declare const splitter_SizeChangeDetails: typeof SizeChangeDetails;
declare namespace splitter {
  export { SplitterContext as Context, type SplitterContextProps as ContextProps, SplitterPanel as Panel, type SplitterPanelBaseProps as PanelBaseProps, type SplitterPanelProps as PanelProps, SplitterResizeTrigger as ResizeTrigger, type SplitterResizeTriggerBaseProps as ResizeTriggerBaseProps, type SplitterResizeTriggerProps as ResizeTriggerProps, SplitterRoot as Root, type SplitterRootBaseProps as RootBaseProps, type SplitterRootProps as RootProps, SplitterRootProvider as RootProvider, type SplitterRootProviderBaseProps as RootProviderBaseProps, type SplitterRootProviderProps as RootProviderProps, splitter_SizeChangeDetails as SizeChangeDetails };
}

export { splitter as Splitter, SplitterContext, type SplitterContextProps, SplitterPanel, type SplitterPanelBaseProps, type SplitterPanelProps, SplitterResizeTrigger, type SplitterResizeTriggerBaseProps, type SplitterResizeTriggerProps, SplitterRoot, type SplitterRootBaseProps, type SplitterRootProps, SplitterRootProvider, type SplitterRootProviderBaseProps, type SplitterRootProviderProps, type UseSplitterContext, type UseSplitterProps, type UseSplitterReturn, useSplitter, useSplitterContext };
