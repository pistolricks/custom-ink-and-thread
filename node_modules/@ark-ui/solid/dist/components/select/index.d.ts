import * as select$1 from '@zag-js/select';
import { ItemProps, ItemState, HighlightChangeDetails, OpenChangeDetails, ValueChangeDetails } from '@zag-js/select';
export { HighlightChangeDetails as SelectHighlightChangeDetails, OpenChangeDetails as SelectOpenChangeDetails, ValueChangeDetails as SelectValueChangeDetails, anatomy as selectAnatomy } from '@zag-js/select';
export { createListCollection } from '../collection.js';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PolymorphicProps, HTMLProps } from '../factory.js';
import { C as CollectionItem, O as Optional } from '../../types-B277wCdv.js';
import { PropTypes } from '@zag-js/solid';
import { ListCollection, CollectionItem as CollectionItem$1 } from '@zag-js/collection';
export { CollectionItem, ListCollection } from '@zag-js/collection';
import { U as UsePresenceProps } from '../../use-presence-Ct1onT3-.js';
import '@zag-js/presence';
import '../../render-strategy-B5MqQP3X.js';

interface SelectClearTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface SelectClearTriggerProps extends HTMLProps<'button'>, SelectClearTriggerBaseProps {
}
declare const SelectClearTrigger: (props: SelectClearTriggerProps) => solid_js.JSX.Element;

interface SelectContentBaseProps extends PolymorphicProps<'div'> {
}
interface SelectContentProps extends HTMLProps<'div'>, SelectContentBaseProps {
}
declare const SelectContent: (props: SelectContentProps) => solid_js.JSX.Element;

interface UseSelectProps<T extends CollectionItem> extends Optional<Omit<select$1.Context<T>, 'collection' | 'dir' | 'getRootNode' | 'open.controlled'>, 'id'> {
    /**
     * The initial open state of the select when it is first rendered.
     * Use when you do not need to control its open state.
     */
    defaultOpen?: select$1.Context['open'];
    /**
     * The initial value of the select when it is first rendered.
     * Use when you do not need to control the state of the select.
     */
    defaultValue?: select$1.Context<T>['value'];
    /**
     * The collection of items
     */
    collection: ListCollection<T>;
}
interface UseSelectReturn<T extends CollectionItem> extends Accessor<select$1.Api<PropTypes, T>> {
}
declare const useSelect: <T extends CollectionItem>(props: UseSelectProps<T>) => UseSelectReturn<T>;

interface UseSelectContext<T extends CollectionItem> extends UseSelectReturn<T> {
}
declare const useSelectContext: () => UseSelectContext<any>;

interface SelectContextProps<T extends CollectionItem> {
    children: (context: UseSelectContext<T>) => JSX.Element;
}
declare const SelectContext: <T extends CollectionItem>(props: SelectContextProps<T>) => JSX.Element;

interface SelectControlBaseProps extends PolymorphicProps<'div'> {
}
interface SelectControlProps extends HTMLProps<'div'>, SelectControlBaseProps {
}
declare const SelectControl: (props: SelectControlProps) => solid_js.JSX.Element;

interface SelectHiddenSelectBaseProps extends PolymorphicProps<'select'> {
}
interface SelectHiddenSelectProps extends HTMLProps<'select'>, SelectHiddenSelectBaseProps {
}
declare const SelectHiddenSelect: (props: SelectHiddenSelectProps) => solid_js.JSX.Element;

interface SelectIndicatorBaseProps extends PolymorphicProps<'div'> {
}
interface SelectIndicatorProps extends HTMLProps<'div'>, SelectIndicatorBaseProps {
}
declare const SelectIndicator: (props: SelectIndicatorProps) => solid_js.JSX.Element;

interface SelectItemBaseProps extends ItemProps, PolymorphicProps<'div'> {
}
interface SelectItemProps extends HTMLProps<'div'>, SelectItemBaseProps {
}
declare const SelectItem: (props: SelectItemProps) => solid_js.JSX.Element;

interface UseSelectItemContext extends Accessor<ItemState> {
}
declare const useSelectItemContext: () => UseSelectItemContext;

interface SelectItemContextProps {
    children: (context: UseSelectItemContext) => JSX.Element;
}
declare const SelectItemContext: (props: SelectItemContextProps) => JSX.Element;

interface SelectItemGroupBaseProps extends PolymorphicProps<'div'> {
}
interface SelectItemGroupProps extends HTMLProps<'div'>, SelectItemGroupBaseProps {
}
declare const SelectItemGroup: (props: SelectItemGroupProps) => solid_js.JSX.Element;

interface SelectItemGroupLabelBaseProps extends PolymorphicProps<'div'> {
}
interface SelectItemGroupLabelProps extends HTMLProps<'div'>, SelectItemGroupLabelBaseProps {
}
declare const SelectItemGroupLabel: (props: SelectItemGroupLabelProps) => solid_js.JSX.Element;

interface SelectItemIndicatorBaseProps extends PolymorphicProps<'div'> {
}
interface SelectItemIndicatorProps extends HTMLProps<'div'>, SelectItemIndicatorBaseProps {
}
declare const SelectItemIndicator: (props: SelectItemIndicatorProps) => solid_js.JSX.Element;

interface SelectItemTextBaseProps extends PolymorphicProps<'span'> {
}
interface SelectItemTextProps extends HTMLProps<'span'>, SelectItemTextBaseProps {
}
declare const SelectItemText: (props: SelectItemTextProps) => solid_js.JSX.Element;

interface SelectLabelBaseProps extends PolymorphicProps<'label'> {
}
interface SelectLabelProps extends HTMLProps<'label'>, SelectLabelBaseProps {
}
declare const SelectLabel: (props: SelectLabelProps) => solid_js.JSX.Element;

interface SelectListBaseProps extends PolymorphicProps<'div'> {
}
interface SelectListProps extends HTMLProps<'div'>, SelectListBaseProps {
}
declare const SelectList: (props: SelectListProps) => solid_js.JSX.Element;

interface SelectPositionerBaseProps extends PolymorphicProps<'div'> {
}
interface SelectPositionerProps extends HTMLProps<'div'>, SelectPositionerBaseProps {
}
declare const SelectPositioner: (props: SelectPositionerProps) => solid_js.JSX.Element;

interface SelectRootBaseProps<T extends CollectionItem> extends UseSelectProps<T>, UsePresenceProps, PolymorphicProps<'div'> {
}
interface SelectRootProps<T extends CollectionItem> extends HTMLProps<'div'>, SelectRootBaseProps<T> {
}
declare const SelectRoot: <T extends CollectionItem>(props: SelectRootProps<T>) => solid_js.JSX.Element;

interface RootProviderProps<T extends CollectionItem> {
    value: UseSelectReturn<T>;
}
interface SelectRootProviderBaseProps<T extends CollectionItem> extends RootProviderProps<T>, UsePresenceProps, PolymorphicProps<'div'> {
}
interface SelectRootProviderProps<T extends CollectionItem> extends HTMLProps<'div'>, SelectRootProviderBaseProps<T> {
}
declare const SelectRootProvider: <T extends CollectionItem>(props: SelectRootProviderProps<T>) => solid_js.JSX.Element;

interface SelectTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface SelectTriggerProps extends HTMLProps<'button'>, SelectTriggerBaseProps {
}
declare const SelectTrigger: (props: SelectTriggerProps) => solid_js.JSX.Element;

interface SelectValueTextBaseProps extends PolymorphicProps<'span'> {
    /**
     * Text to display when no value is selected.
     */
    placeholder?: string;
}
interface SelectValueTextProps extends HTMLProps<'span'>, SelectValueTextBaseProps {
}
declare const SelectValueText: (props: SelectValueTextProps) => solid_js.JSX.Element;

declare const select_HighlightChangeDetails: typeof HighlightChangeDetails;
declare const select_ListCollection: typeof ListCollection;
declare const select_OpenChangeDetails: typeof OpenChangeDetails;
declare const select_ValueChangeDetails: typeof ValueChangeDetails;
declare namespace select {
  export { SelectClearTrigger as ClearTrigger, type SelectClearTriggerBaseProps as ClearTriggerBaseProps, type SelectClearTriggerProps as ClearTriggerProps, CollectionItem$1 as CollectionItem, SelectContent as Content, type SelectContentBaseProps as ContentBaseProps, type SelectContentProps as ContentProps, SelectContext as Context, type SelectContextProps as ContextProps, SelectControl as Control, type SelectControlBaseProps as ControlBaseProps, type SelectControlProps as ControlProps, SelectHiddenSelect as HiddenSelect, type SelectHiddenSelectBaseProps as HiddenSelectBaseProps, type SelectHiddenSelectProps as HiddenSelectProps, select_HighlightChangeDetails as HighlightChangeDetails, SelectIndicator as Indicator, type SelectIndicatorBaseProps as IndicatorBaseProps, type SelectIndicatorProps as IndicatorProps, SelectItem as Item, type SelectItemBaseProps as ItemBaseProps, SelectItemContext as ItemContext, type SelectItemContextProps as ItemContextProps, SelectItemGroup as ItemGroup, type SelectItemGroupBaseProps as ItemGroupBaseProps, SelectItemGroupLabel as ItemGroupLabel, type SelectItemGroupLabelBaseProps as ItemGroupLabelBaseProps, type SelectItemGroupLabelProps as ItemGroupLabelProps, type SelectItemGroupProps as ItemGroupProps, SelectItemIndicator as ItemIndicator, type SelectItemIndicatorBaseProps as ItemIndicatorBaseProps, type SelectItemIndicatorProps as ItemIndicatorProps, type SelectItemProps as ItemProps, SelectItemText as ItemText, type SelectItemTextBaseProps as ItemTextBaseProps, type SelectItemTextProps as ItemTextProps, SelectLabel as Label, type SelectLabelBaseProps as LabelBaseProps, type SelectLabelProps as LabelProps, SelectList as List, type SelectListBaseProps as ListBaseProps, select_ListCollection as ListCollection, type SelectListProps as ListProps, select_OpenChangeDetails as OpenChangeDetails, SelectPositioner as Positioner, type SelectPositionerBaseProps as PositionerBaseProps, type SelectPositionerProps as PositionerProps, SelectRoot as Root, type SelectRootBaseProps as RootBaseProps, type SelectRootProps as RootProps, SelectRootProvider as RootProvider, type SelectRootProviderBaseProps as RootProviderBaseProps, type SelectRootProviderProps as RootProviderProps, SelectTrigger as Trigger, type SelectTriggerBaseProps as TriggerBaseProps, type SelectTriggerProps as TriggerProps, select_ValueChangeDetails as ValueChangeDetails, SelectValueText as ValueText, type SelectValueTextBaseProps as ValueTextBaseProps, type SelectValueTextProps as ValueTextProps };
}

export { select as Select, SelectClearTrigger, type SelectClearTriggerBaseProps, type SelectClearTriggerProps, SelectContent, type SelectContentBaseProps, type SelectContentProps, SelectContext, type SelectContextProps, SelectControl, type SelectControlBaseProps, type SelectControlProps, SelectHiddenSelect, type SelectHiddenSelectBaseProps, type SelectHiddenSelectProps, SelectIndicator, type SelectIndicatorBaseProps, type SelectIndicatorProps, SelectItem, type SelectItemBaseProps, SelectItemContext, type SelectItemContextProps, SelectItemGroup, type SelectItemGroupBaseProps, SelectItemGroupLabel, type SelectItemGroupLabelBaseProps, type SelectItemGroupLabelProps, type SelectItemGroupProps, SelectItemIndicator, type SelectItemIndicatorBaseProps, type SelectItemIndicatorProps, type SelectItemProps, SelectItemText, type SelectItemTextBaseProps, type SelectItemTextProps, SelectLabel, type SelectLabelBaseProps, type SelectLabelProps, SelectList, type SelectListBaseProps, type SelectListProps, SelectPositioner, type SelectPositionerBaseProps, type SelectPositionerProps, SelectRoot, type SelectRootBaseProps, type SelectRootProps, SelectRootProvider, type SelectRootProviderBaseProps, type SelectRootProviderProps, SelectTrigger, type SelectTriggerBaseProps, type SelectTriggerProps, SelectValueText, type SelectValueTextBaseProps, type SelectValueTextProps, type UseSelectContext, type UseSelectItemContext, type UseSelectProps, type UseSelectReturn, useSelect, useSelectContext, useSelectItemContext };
