import * as pagination$1 from '@zag-js/pagination';
import { EllipsisProps, ItemProps, ItemLabelDetails, PageChangeDetails, PageSizeChangeDetails } from '@zag-js/pagination';
export { ItemLabelDetails as PaginationItemLabelDetails, PageChangeDetails as PaginationPageChangeDetails, PageSizeChangeDetails as PaginationPageSizeChangeDetails, anatomy as paginationAnatomy } from '@zag-js/pagination';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PropTypes } from '@zag-js/solid';
import { O as Optional, A as Assign } from '../../types-B277wCdv.js';
import { PolymorphicProps, HTMLProps } from '../factory.js';

interface UsePaginationProps extends Optional<Omit<pagination$1.Context, 'dir' | 'getRootNode'>, 'id'> {
    /**
     * The initial page of the pagination when it is first rendered.
     * Use when you do not need to control the state of the pagination.
     */
    defaultPage?: pagination$1.Context['page'];
}
interface UsePaginationReturn extends Accessor<pagination$1.Api<PropTypes>> {
}
declare const usePagination: (props: UsePaginationProps) => UsePaginationReturn;

interface UsePaginationContext extends UsePaginationReturn {
}
declare const usePaginationContext: () => UsePaginationContext;

interface PaginationContextProps {
    children: (context: UsePaginationContext) => JSX.Element;
}
declare const PaginationContext: (props: PaginationContextProps) => JSX.Element;

interface PaginationEllipsisBaseProps extends EllipsisProps, PolymorphicProps<'div'> {
}
interface PaginationEllipsisProps extends HTMLProps<'div'>, PaginationEllipsisBaseProps {
}
declare const PaginationEllipsis: (props: PaginationEllipsisProps) => solid_js.JSX.Element;

interface PaginationItemBaseProps extends ItemProps, PolymorphicProps<'button'> {
}
interface PaginationItemProps extends Assign<HTMLProps<'button'>, PaginationItemBaseProps> {
}
declare const PaginationItem: (props: PaginationItemProps) => solid_js.JSX.Element;

interface PaginationNextTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface PaginationNextTriggerProps extends HTMLProps<'button'>, PaginationNextTriggerBaseProps {
}
declare const PaginationNextTrigger: (props: PaginationNextTriggerProps) => solid_js.JSX.Element;

interface PaginationPrevTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface PaginationPrevTriggerProps extends HTMLProps<'button'>, PaginationPrevTriggerBaseProps {
}
declare const PaginationPrevTrigger: (props: PaginationPrevTriggerProps) => solid_js.JSX.Element;

interface PaginationRootBaseProps extends UsePaginationProps, PolymorphicProps<'nav'> {
}
interface PaginationRootProps extends HTMLProps<'nav'>, PaginationRootBaseProps {
}
declare const PaginationRoot: (props: PaginationRootProps) => solid_js.JSX.Element;

interface RootProviderProps {
    value: UsePaginationReturn;
}
interface PaginationRootProviderBaseProps extends PolymorphicProps<'nav'> {
}
interface PaginationRootProviderProps extends HTMLProps<'nav'>, RootProviderProps, PaginationRootProviderBaseProps {
}
declare const PaginationRootProvider: (props: PaginationRootProviderProps) => solid_js.JSX.Element;

declare const pagination_ItemLabelDetails: typeof ItemLabelDetails;
declare const pagination_PageChangeDetails: typeof PageChangeDetails;
declare const pagination_PageSizeChangeDetails: typeof PageSizeChangeDetails;
declare namespace pagination {
  export { PaginationContext as Context, type PaginationContextProps as ContextProps, PaginationEllipsis as Ellipsis, type PaginationEllipsisBaseProps as EllipsisBaseProps, type PaginationEllipsisProps as EllipsisProps, PaginationItem as Item, type PaginationItemBaseProps as ItemBaseProps, pagination_ItemLabelDetails as ItemLabelDetails, type PaginationItemProps as ItemProps, PaginationNextTrigger as NextTrigger, type PaginationNextTriggerBaseProps as NextTriggerBaseProps, type PaginationNextTriggerProps as NextTriggerProps, pagination_PageChangeDetails as PageChangeDetails, pagination_PageSizeChangeDetails as PageSizeChangeDetails, PaginationPrevTrigger as PrevTrigger, type PaginationPrevTriggerBaseProps as PrevTriggerBaseProps, type PaginationPrevTriggerProps as PrevTriggerProps, PaginationRoot as Root, type PaginationRootBaseProps as RootBaseProps, type PaginationRootProps as RootProps, PaginationRootProvider as RootProvider, type PaginationRootProviderBaseProps as RootProviderBaseProps, type PaginationRootProviderProps as RootProviderProps };
}

export { pagination as Pagination, PaginationContext, type PaginationContextProps, PaginationEllipsis, type PaginationEllipsisBaseProps, type PaginationEllipsisProps, PaginationItem, type PaginationItemBaseProps, type PaginationItemProps, PaginationNextTrigger, type PaginationNextTriggerBaseProps, type PaginationNextTriggerProps, PaginationPrevTrigger, type PaginationPrevTriggerBaseProps, type PaginationPrevTriggerProps, PaginationRoot, type PaginationRootBaseProps, type PaginationRootProps, PaginationRootProvider, type PaginationRootProviderBaseProps, type PaginationRootProviderProps, type UsePaginationContext, type UsePaginationProps, type UsePaginationReturn, usePagination, usePaginationContext };
