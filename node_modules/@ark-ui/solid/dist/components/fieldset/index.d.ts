import * as solid_js from 'solid-js';
import { JSX } from 'solid-js';
import { PolymorphicProps, HTMLProps } from '../factory.js';
import * as _zag_js_anatomy from '@zag-js/anatomy';
import '../../types-B277wCdv.js';

interface UseFieldsetProps {
    /**
     * The id of the fieldset.
     */
    id?: string;
    /**
     * Indicates whether the fieldset is disabled.
     */
    disabled?: boolean;
    /**
     * Indicates whether the fieldset is invalid.
     */
    invalid?: boolean;
}
type UseFieldsetReturn = ReturnType<typeof useFieldset>;
declare const useFieldset: (props: UseFieldsetProps) => solid_js.Accessor<{
    refs: {
        rootRef: HTMLFieldSetElement | undefined;
    };
    disabled: boolean;
    invalid: boolean;
    getRootProps: () => {
        disabled: boolean;
        'data-disabled': Booleanish;
        'data-invalid': Booleanish;
        'aria-describedby': string | undefined;
        "data-scope": string;
        "data-part": string;
    };
    getLegendProps: () => {
        'data-disabled': Booleanish;
        'data-invalid': Booleanish;
        "data-scope": string;
        "data-part": string;
    };
    getHelperTextProps: () => {
        "data-scope": string;
        "data-part": string;
        id: string;
    };
    getErrorTextProps: () => {
        'aria-live': string;
        "data-scope": string;
        "data-part": string;
        id: string;
    };
}>;
type Booleanish = boolean | 'true' | 'false';

interface UseFieldsetContext extends UseFieldsetReturn {
}
declare const useFieldsetContext: () => UseFieldsetContext;

interface FieldsetContextProps {
    children: (context: UseFieldsetContext) => JSX.Element;
}
declare const FieldsetContext: (props: FieldsetContextProps) => JSX.Element;

interface FieldsetErrorTextBaseProps extends PolymorphicProps<'span'> {
}
interface FieldsetErrorTextProps extends HTMLProps<'span'>, FieldsetErrorTextBaseProps {
}
declare const FieldsetErrorText: (props: FieldsetErrorTextProps) => solid_js.JSX.Element;

interface FieldsetHelperTextBaseProps extends PolymorphicProps<'span'> {
}
interface FieldsetHelperTextProps extends HTMLProps<'span'>, FieldsetHelperTextBaseProps {
}
declare const FieldsetHelperText: (props: FieldsetHelperTextProps) => solid_js.JSX.Element;

interface FieldsetLegendBaseProps extends PolymorphicProps<'legend'> {
}
interface FieldsetLegendProps extends HTMLProps<'legend'>, FieldsetLegendBaseProps {
}
declare const FieldsetLegend: (props: FieldsetLegendProps) => solid_js.JSX.Element;

interface FieldsetRootBaseProps extends UseFieldsetProps, PolymorphicProps<'fieldset'> {
}
interface FieldsetRootProps extends HTMLProps<'fieldset'>, FieldsetRootBaseProps {
}
declare const FieldsetRoot: {
    (props: FieldsetRootProps): solid_js.JSX.Element;
    displayName: string;
};

interface RootProviderProps {
    value: UseFieldsetReturn;
}
interface FieldsetRootProviderBaseProps extends RootProviderProps, PolymorphicProps<'fieldset'> {
}
interface FieldsetRootProviderProps extends HTMLProps<'fieldset'>, FieldsetRootProviderBaseProps {
}
declare const FieldsetRootProvider: (props: FieldsetRootProviderProps) => solid_js.JSX.Element;

declare const fieldsetAnatomy: _zag_js_anatomy.AnatomyInstance<"legend" | "root" | "errorText" | "helperText">;

declare namespace fieldset {
  export { FieldsetContext as Context, type FieldsetContextProps as ContextProps, FieldsetErrorText as ErrorText, type FieldsetErrorTextBaseProps as ErrorTextBaseProps, type FieldsetErrorTextProps as ErrorTextProps, FieldsetHelperText as HelperText, type FieldsetHelperTextBaseProps as HelperTextBaseProps, type FieldsetHelperTextProps as HelperTextProps, FieldsetLegend as Legend, type FieldsetLegendBaseProps as LegendBaseProps, type FieldsetLegendProps as LegendProps, FieldsetRoot as Root, type FieldsetRootBaseProps as RootBaseProps, type FieldsetRootProps as RootProps, FieldsetRootProvider as RootProvider, type FieldsetRootProviderBaseProps as RootProviderBaseProps, type FieldsetRootProviderProps as RootProviderProps };
}

export { fieldset as Fieldset, FieldsetContext, type FieldsetContextProps, FieldsetErrorText, type FieldsetErrorTextBaseProps, type FieldsetErrorTextProps, FieldsetHelperText, type FieldsetHelperTextBaseProps, type FieldsetHelperTextProps, FieldsetLegend, type FieldsetLegendBaseProps, type FieldsetLegendProps, FieldsetRoot, type FieldsetRootBaseProps, type FieldsetRootProps, FieldsetRootProvider, type FieldsetRootProviderBaseProps, type FieldsetRootProviderProps, type UseFieldsetContext, fieldsetAnatomy, useFieldsetContext };
