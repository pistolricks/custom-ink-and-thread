import * as _zag_js_core from '@zag-js/core';
import { StateMachine, Machine, MachineSrc } from '@zag-js/core';
export { ContextFrom, EventFrom, StateFrom } from '@zag-js/core';
import * as _zag_js_types from '@zag-js/types';
import { JSX, Accessor } from 'solid-js';
import { Store } from 'solid-js/store';

type MaybeAccessor<T> = T | (() => T);
declare function mergeProps<T>(source: MaybeAccessor<T>): T;
declare function mergeProps<T, U>(source: MaybeAccessor<T>, source1: MaybeAccessor<U>): T & U;
declare function mergeProps<T, U, V>(source: MaybeAccessor<T>, source1: MaybeAccessor<U>, source2: MaybeAccessor<V>): T & U & V;
declare function mergeProps<T, U, V, W>(source: MaybeAccessor<T>, source1: MaybeAccessor<U>, source2: MaybeAccessor<V>, source3: MaybeAccessor<W>): T & U & V & W;

type PropTypes = JSX.IntrinsicElements & {
    element: JSX.HTMLAttributes<any>;
    style: JSX.CSSProperties;
};
declare const normalizeProps: _zag_js_types.NormalizeProps<PropTypes>;

declare function useActor<TContext extends Record<string, any>, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject = StateMachine.AnyEventObject>(service: Machine<TContext, TState, TEvent>): readonly [StateMachine.State<TContext, TState, TEvent>, (evt: StateMachine.Event<TEvent>) => void];

type MachineOptions<TContext extends Record<string, any>, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject = StateMachine.AnyEventObject> = Omit<StateMachine.HookOptions<TContext, TState, TEvent>, "context"> & {
    context?: Store<Partial<TContext>> | Accessor<Partial<TContext>>;
};

declare function useMachine<TContext extends Record<string, any>, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject = StateMachine.AnyEventObject>(machine: MachineSrc<TContext, TState, TEvent>, options?: MachineOptions<TContext, TState, TEvent>): readonly [StateMachine.State<TContext, TState, TEvent>, (evt: StateMachine.Event<TEvent>) => void, _zag_js_core.Machine<TContext, TState, TEvent>];

export { type PropTypes, mergeProps, normalizeProps, useActor, useMachine };
