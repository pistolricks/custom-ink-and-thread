import { JSX, Component, Accessor } from 'solid-js';
import { MaybeAccessor } from '@corvu/utils/reactivity';
export { MaybeAccessor } from '@corvu/utils/reactivity';

type CreateDismissibleProps = {
    /**
     * The element to make dismissible.
     */
    element: MaybeAccessor<HTMLElement | null>;
    /**
     * Callback fired when the element is being dismissed.
     */
    onDismiss: (reason: 'escapeKey' | 'outsidePointer' | 'outsideFocus') => void;
    /**
     * Whether to dismiss the element when the escape key is pressed.
     * @defaultValue `true`
     */
    dismissOnEscapeKeyDown?: MaybeAccessor<boolean>;
    /**
     * Whether to dismiss the element when a focus event happens outside the element.
     * @defaultValue `true`
     */
    dismissOnOutsideFocus?: MaybeAccessor<boolean>;
    /**
     * Whether to dismiss the element when a pointer down event happens outside the element.
     * @defaultValue `true`
     */
    dismissOnOutsidePointer?: MaybeAccessor<boolean>;
    /**
     * Whether `dismissOnOutsidePointer` should be triggered on `pointerdown` or `pointerup`.
     * @defaultValue `pointerup`
     */
    outsidePointerStrategy?: MaybeAccessor<'pointerdown' | 'pointerup'>;
    /**
     * Ignore pointer events that occur inside of this element.
     */
    outsidePointerIgnore?: MaybeAccessor<(HTMLElement | null)[]>;
    /**
     * Whether to disable pointer events outside the element.
     * @defaultValue `true`
     */
    noOutsidePointerEvents?: MaybeAccessor<boolean>;
    /**
     * Callback fired when the escape key is pressed. Can be prevented by calling `event.preventDefault`.
     */
    onEscapeKeyDown?: (event: KeyboardEvent) => void;
    /**
     * Callback fired when a focus event happens outside the element. Can be prevented by calling `event.preventDefault`.
     */
    onOutsideFocus?: (event: CustomEvent) => void;
    /**
     * Callback fired when a pointer down event happens outside the element. Can be prevented by calling `event.preventDefault`.
     */
    onOutsidePointer?: (event: PointerEvent) => void;
};

type DismissibleProps = {
    /**
     * Whether the dismissible is enabled.
     * @defaultValue `true`
     */
    enabled: boolean;
    dismissibleId?: string;
    /** @hidden */
    children: JSX.Element | ((props: DismissibleChildrenProps) => JSX.Element);
} & CreateDismissibleProps;
type DismissibleChildrenProps = {
    isLastLayer: boolean;
};
/** A component that can be dismissed by pressing the escape key or clicking outside of it. Can be nested. */
declare const Dismissible: Component<DismissibleProps>;
declare const activeDismissibles: Accessor<string[]>;

export { type CreateDismissibleProps, type DismissibleChildrenProps, type DismissibleProps, activeDismissibles, Dismissible as default };
