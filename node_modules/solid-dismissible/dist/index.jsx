// src/Dismissible.tsx
import {
  createContext,
  createEffect as createEffect5,
  createMemo,
  createSignal,
  createUniqueId,
  mergeProps as mergeProps6,
  onCleanup as onCleanup4,
  splitProps,
  untrack,
  useContext
} from "solid-js";
import { access as access6 } from "@corvu/utils/reactivity";

// src/create/dismissible.ts
import { access as access5 } from "@corvu/utils/reactivity";

// src/create/escapeKeyDown.ts
import { access } from "@corvu/utils/reactivity";
import { createEffect, mergeProps, onCleanup } from "solid-js";
var createEscapeKeyDown = (props) => {
  const defaultedProps = mergeProps(
    {
      enabled: true
    },
    props
  );
  createEffect(() => {
    if (!access(defaultedProps.enabled)) {
      return;
    }
    document.addEventListener("keydown", handleKeyDown);
    onCleanup(() => {
      document.removeEventListener("keydown", handleKeyDown);
    });
  });
  const handleKeyDown = (event) => {
    if (event.key === "Escape") {
      defaultedProps.onEscapeKeyDown(event);
    }
  };
};
var escapeKeyDown_default = createEscapeKeyDown;

// src/create/noPointerEvents.ts
import { access as access2 } from "@corvu/utils/reactivity";
import { createEffect as createEffect2, mergeProps as mergeProps2 } from "solid-js";
import createStyle from "@corvu/utils/create/style";
var createNoPointerEvents = (props) => {
  const defaultedProps = mergeProps2(
    {
      enabled: true
    },
    props
  );
  createEffect2(() => {
    const { body } = document;
    if (!access2(defaultedProps.enabled)) return;
    createStyle({
      key: "no-pointer-events",
      element: body,
      style: {
        pointerEvents: "none"
      }
    });
  });
};
var noPointerEvents_default = createNoPointerEvents;

// src/create/outsideFocus.ts
import { access as access3 } from "@corvu/utils/reactivity";
import { createEffect as createEffect3, mergeProps as mergeProps3, onCleanup as onCleanup2 } from "solid-js";
import { contains } from "@corvu/utils/dom";
var EVENT_ON_FOCUS = "dismissible.outsideFocus";
var EVENT_OPTIONS = { bubbles: false, cancelable: true };
var createOutsideFocus = (props) => {
  const defaultedProps = mergeProps3(
    {
      enabled: true,
      ignorePointerEvents: false
    },
    props
  );
  let pointerDown = false;
  createEffect3(() => {
    if (!access3(defaultedProps.enabled)) {
      return;
    }
    const ignorePointerEvents = access3(defaultedProps.ignorePointerEvents);
    document.addEventListener("focusin", handleFocus);
    if (ignorePointerEvents) {
      document.addEventListener("pointerdown", handlePointerDown);
    }
    onCleanup2(() => {
      document.removeEventListener("focusin", handleFocus);
      if (ignorePointerEvents) {
        document.removeEventListener("pointerdown", handlePointerDown);
      }
    });
  });
  const handleFocus = (event) => {
    if (pointerDown) {
      pointerDown = false;
      return;
    }
    const element = access3(defaultedProps.element);
    if (element && !contains(element, event.target)) {
      const customEvent = new CustomEvent(EVENT_ON_FOCUS, EVENT_OPTIONS);
      element.dispatchEvent(customEvent);
      defaultedProps.onFocus(customEvent);
    }
  };
  const handlePointerDown = () => {
    pointerDown = true;
  };
};
var outsideFocus_default = createOutsideFocus;

// src/create/outsidePointer.ts
import { access as access4 } from "@corvu/utils/reactivity";
import { createEffect as createEffect4, mergeProps as mergeProps4, onCleanup as onCleanup3 } from "solid-js";
import { contains as contains2 } from "@corvu/utils/dom";
var createOutsidePointer = (props) => {
  const defaultedProps = mergeProps4(
    {
      enabled: true,
      strategy: "pointerup"
    },
    props
  );
  createEffect4(() => {
    if (!access4(defaultedProps.enabled)) {
      return;
    }
    const strategy = access4(defaultedProps.strategy);
    document.addEventListener(strategy, handlePointer);
    onCleanup3(() => {
      document.removeEventListener(strategy, handlePointer);
    });
  });
  const handlePointer = (event) => {
    const element = access4(defaultedProps.element);
    const ignore = access4(defaultedProps.ignore);
    if (element && !contains2(element, event.target) && !(ignore && ignore.some(
      (ignoreElement) => ignoreElement && contains2(ignoreElement, event.target)
    ))) {
      defaultedProps.onPointer(event);
    }
  };
};
var outsidePointer_default = createOutsidePointer;

// src/create/dismissible.ts
import { mergeProps as mergeProps5 } from "solid-js";
var createDismissible = (props) => {
  const defaultedProps = mergeProps5(
    {
      dismissOnEscapeKeyDown: true,
      dismissOnOutsideFocus: true,
      dismissOnOutsidePointer: true,
      outsidePointerStrategy: "pointerup",
      noOutsidePointerEvents: true
    },
    props
  );
  escapeKeyDown_default({
    enabled: () => access5(defaultedProps.dismissOnEscapeKeyDown),
    onEscapeKeyDown: (event) => {
      defaultedProps.onEscapeKeyDown?.(event);
      if (!event.defaultPrevented) {
        defaultedProps.onDismiss("escapeKey");
      }
    }
  });
  outsideFocus_default({
    enabled: () => access5(defaultedProps.dismissOnOutsideFocus),
    onFocus: (event) => {
      defaultedProps.onOutsideFocus?.(event);
      if (!event.defaultPrevented) {
        defaultedProps.onDismiss("outsideFocus");
      }
    },
    element: () => access5(defaultedProps.element),
    ignorePointerEvents: () => access5(defaultedProps.noOutsidePointerEvents) || access5(defaultedProps.dismissOnOutsidePointer)
  });
  outsidePointer_default({
    enabled: () => access5(defaultedProps.dismissOnOutsidePointer),
    strategy: () => access5(defaultedProps.outsidePointerStrategy),
    ignore: () => access5(defaultedProps.outsidePointerIgnore) ?? [],
    onPointer: (event) => {
      defaultedProps.onOutsidePointer?.(event);
      if (!event.defaultPrevented) {
        const ctrlLeftClick = event.button === 0 && event.ctrlKey === true;
        const isRightClick = event.button === 2 || ctrlLeftClick;
        if (isRightClick) return;
        defaultedProps.onDismiss("outsidePointer");
      }
    },
    element: () => access5(defaultedProps.element)
  });
  noPointerEvents_default({
    enabled: () => access5(defaultedProps.noOutsidePointerEvents)
  });
};
var dismissible_default = createDismissible;

// src/Dismissible.tsx
import { isFunction } from "@corvu/utils";
var DismissibleContext = createContext();
var Dismissible = (props) => {
  const defaultedProps = mergeProps6(
    {
      dismissibleId: createUniqueId()
    },
    props
  );
  const memoizedDismissible = createMemo(() => {
    const dismissibleContext = useContext(DismissibleContext);
    if (dismissibleContext) {
      return <DismissibleLayer {...props} />;
    }
    const [layers, setLayers] = createSignal([
      defaultedProps.dismissibleId
    ]);
    const onLayerShow = (dismissibleId) => {
      setLayers((layers2) => [...layers2, dismissibleId]);
    };
    const onLayerDismiss = (dismissibleId) => {
      setLayers((layers2) => layers2.filter((layer) => layer !== dismissibleId));
    };
    return <DismissibleContext.Provider
      value={{
        layers,
        onLayerShow,
        onLayerDismiss
      }}
    >
        <DismissibleLayer {...props} />
      </DismissibleContext.Provider>;
  });
  return memoizedDismissible;
};
var [activeDismissibles, setActiveDismissibles] = createSignal([]);
var DismissibleLayer = (props) => {
  const defaultedProps = mergeProps6(
    {
      enabled: true,
      dismissibleId: createUniqueId(),
      dismissOnEscapeKeyDown: true,
      dismissOnOutsideFocus: true,
      dismissOnOutsidePointer: true,
      outsidePointerStrategy: "pointerup",
      noOutsidePointerEvents: true
    },
    props
  );
  const [localProps, otherProps] = splitProps(defaultedProps, [
    "enabled",
    "children",
    "dismissOnEscapeKeyDown",
    "dismissOnOutsideFocus",
    "dismissOnOutsidePointer",
    "outsidePointerStrategy",
    "outsidePointerIgnore",
    "noOutsidePointerEvents",
    "onDismiss"
  ]);
  const context = useContext(DismissibleContext);
  onCleanup4(() => {
    context.onLayerDismiss(defaultedProps.dismissibleId);
    setActiveDismissibles(
      (activeDismissibles2) => activeDismissibles2.filter(
        (dismissibleId) => dismissibleId !== defaultedProps.dismissibleId
      )
    );
  });
  createEffect5(() => {
    if (localProps.enabled) {
      context.onLayerShow(defaultedProps.dismissibleId);
      setActiveDismissibles((activeDismissibles2) => [
        ...activeDismissibles2,
        defaultedProps.dismissibleId
      ]);
    } else {
      context.onLayerDismiss(defaultedProps.dismissibleId);
      setActiveDismissibles(
        (activeDismissibles2) => activeDismissibles2.filter(
          (dismissibleId) => dismissibleId !== defaultedProps.dismissibleId
        )
      );
    }
  });
  const isLastLayer = () => {
    return context.layers()[context.layers().length - 1] === defaultedProps.dismissibleId;
  };
  dismissible_default({
    dismissOnEscapeKeyDown: () => access6(localProps.dismissOnEscapeKeyDown) && isLastLayer() && localProps.enabled,
    dismissOnOutsideFocus: () => access6(localProps.dismissOnOutsideFocus) && isLastLayer() && localProps.enabled,
    dismissOnOutsidePointer: () => access6(localProps.dismissOnOutsidePointer) && isLastLayer() && localProps.enabled,
    outsidePointerStrategy: localProps.outsidePointerStrategy,
    outsidePointerIgnore: localProps.outsidePointerIgnore,
    noOutsidePointerEvents: () => access6(localProps.noOutsidePointerEvents) && localProps.enabled,
    onDismiss: (reason) => {
      localProps.onDismiss(reason);
    },
    ...otherProps
  });
  const memoizedChildren = createMemo(() => localProps.children);
  const resolveChildren = () => {
    const children = memoizedChildren();
    if (isFunction(children)) {
      return children({
        get isLastLayer() {
          return isLastLayer();
        }
      });
    }
    return children;
  };
  return untrack(() => resolveChildren());
};
var Dismissible_default = Dismissible;

// src/index.ts
var src_default = Dismissible_default;
export {
  activeDismissibles,
  src_default as default
};
