import { MaybeAccessor } from '@corvu/utils/reactivity';
export { MaybeAccessor } from '@corvu/utils/reactivity';

/**
 * Traps focus inside the given element. Is aware of changes being made to the DOM tree inside the focus trap by using a `MutationObserver`.
 *
 * @param props.element - Element to trap focus in.
 * @param props.enabled - If the focus trap is enabled. *Default = `true`*
 * @param props.observeChanges - Whether to watch for changes being made to the DOM tree inside the focus trap and reload the focus trap accordingly. *Default = `true`*
 * @param props.initialFocusElement - The element to receive focus when the focus trap is activated. *Default = The first focusable element inside `element`*
 * @param props.restoreFocus - If the focus should be restored to the element the focus was on initially when the focus trap is deactivated. *Default = `true`*
 * @param props.finalFocusElement - The element to receive focus when the focus trap is deactivated (`enabled` = `false`). *Default = The element the focus was on initially*
 * @param props.onInitialFocus - Callback fired when focus moves inside the focus trap. Can be prevented by calling `event.preventDefault`.
 * @param props.onFinalFocus - Callback fired when focus moves outside the focus trap. Can be prevented by calling `event.preventDefault`.
 */
declare const createFocusTrap: (props: {
    element: MaybeAccessor<HTMLElement | null>;
    enabled?: MaybeAccessor<boolean>;
    observeChanges?: MaybeAccessor<boolean>;
    initialFocusElement?: MaybeAccessor<HTMLElement | null>;
    restoreFocus?: MaybeAccessor<boolean>;
    finalFocusElement?: MaybeAccessor<HTMLElement | null>;
    onInitialFocus?: (event: Event) => void;
    onFinalFocus?: (event: Event) => void;
}) => void;

export { createFocusTrap as default };
